\ The portions of this file that are from CAL-3040
\ are copyright 2006 by the Osmosian Order.
\ The remainder is copyright 2014, 2017 by Jasper Paulsen.

\ The dialog is part of the desktop's bar.
\ It shares screen space with the menus and the status,
\ so it is not visible when they are, and vice versa.

to add a button to the dialog given a string:
  if the string is blank, void the button; exit.
  if the dialog is nil, exit.
  create the button.
  append the button to the dialog's buttons.
  put the string into the button's name.

to adjust the dialog:
  if the dialog is nil, exit.
  adjust the dialog (buttons).
  adjust the dialog (roundy box).
  adjust the dialog (prompt).
  adjust the dialog (text).

to adjust the dialog (buttons):
  put the bar's display and 1/12 inch into a roundy box.
  put the roundy box's top plus the command height into the roundy box's bottom.
  if the trio shoves the status,
    put the trio allowance into a width;
    put the roundy box's right minus the width into the roundy box's right.
  put the roundy box's right minus the button width into the roundy box's left.
  loop.
    get a button from the dialog's buttons (backwards).
    if the button is nil, exit.
    put the roundy box into the button's roundy box.
    move the roundy box left the button width.
  repeat.

to adjust the dialog (prompt):
  put the dialog's roundy box's left plus 1/8 inch
    into the dialog's prompt box's left.
  put the dialog's roundy box's top plus 1/24 inch
    into the dialog's prompt box's top.
  get a width given the dialog's prompt and the default font.
  put the dialog's prompt box's left plus the width plus 1/12 inch
    into the dialog's prompt box's right.
  put the dialog's roundy box's bottom minus 1/24 inch
    into the dialog's prompt box's bottom.

to adjust the dialog (roundy box):
  put the bar's display and 1/12 inch into the dialog's roundy box.
  put the dialog's roundy box's top plus the command height
    into the dialog's roundy box's bottom.
  if the dialog's buttons are empty, exit.
  put the dialog's first button's left into the dialog's roundy box's right.

to adjust the dialog (text):
  if the dialog's text is nil, exit.
  set the dialog's text's horizontal scroll flag.
  select every byte in the dialog's text.
  put the dialog's pen into the dialog's text's pen.
  put the dialog's prompt box's right into a box's left.
  put the dialog's prompt box's top into the box's top.
  put the dialog's roundy box's right minus 1/8 inch into the box's right.
  put the dialog's prompt box's bottom into the box's bottom.
  change the dialog's text given the box.

an alternative is a string.

the answer is a string.

to ask a question:
  ask the question with "".

to ask a question with choices a string and another string:
  ask the question with choices the string and the other string and "".

to ask a question with choices a string and another string and a third string:
  create the dialog.
  put "choice" into the dialog's kind.
  put the question into the dialog's prompt.
  add a button to the dialog given the string.
  add another button to the dialog given the other string.
  add a third button to the dialog given the third string.
  handle the dialog.
  destroy the dialog.

to ask a question with a default number:
  convert the default to a string.
  ask the question with the string.

to ask a question with a default ratio:
  convert the default to a string.
  ask the question with the string.

to ask a question with a default string:
  create the dialog.
  put "input" into the dialog's kind.
  put the question into the dialog's prompt.
  add a button to the dialog given "M'Kay".
  add another button to the dialog given "Cancel".
  create the dialog's text.
  put the default into the dialog's text.
  handle the dialog.
  destroy the dialog.

a button is a thing with a roundy box and a name.

the button width is 2/3 inch.

to cancel the dialog:
  if the dialog is nil, exit.
  if the dialog's text is nil, put "cancel" into the answer.
  if the dialog's text is not nil, put "" into the answer.
  relinquish control.

to create a button:
  allocate memory for the button.

to create the dialog:
  allocate memory for the dialog.
  put the black color into the dialog's pen.

to decide if a spot is in a button:
  if the button is nil, say no.
  if the spot is in the button's roundy box, say yes.
  say no.

to decide if there is room (for the trio):
  put the bar's display and 1/12 inch into a roundy box.
  put the trio allowance into a width.
  if the roundy box's right is at least
    4-7/12 inches plus the width, say yes.
  say no.

to decide if the user is sure:
  if list was requested, say yes.
  if compile was requested, say yes.
  if test was requested, say yes.
  ask "Are you quite sure?" with choices "Yes" and "No".
  if the answer is "yes", say yes.
  say no.

to decide if the user is willing to close a node:
  if list was requested, say yes.
  if compile was requested, say yes.
  if test was requested, say yes.
  if the node is nil, say yes.
  if the node is not modified, say yes.
  ask "Save?" with choices "Yes" and "No" and "Cancel".
  if the answer is "cancel", say no.
  if the answer is "no", say yes.
  save the node.
  if the i/o error is not blank, show error the i/o error; say no.
  say yes.

the dialog is a thing with
  a kind [choice, error, input],
  a roundy box,
  a prompt box, a prompt,
  a pen color,
  a text,
  some buttons.

to draw a button:
  if the button is nil, exit.
  unmask everything.
  draw the button's roundy box with the black color and the white color.
  mask outside the button's roundy box.
  draw the button's name in the button's roundy box
    with the black color and the requested control font and "center".

to draw some buttons:
  get a button from the buttons.
  if the button is nil, exit.
  draw the button.
  repeat.

to draw the dialog:
  if the dialog is nil, exit.
  unmask everything.
  draw the dialog's roundy box with the black color and the white color.
  mask outside the dialog's roundy box.
  draw the dialog's prompt in the dialog's prompt box
    with the dialog's pen and the default font and "left".
  draw the dialog's text (editing).
  draw the dialog's buttons.

to find a button given a key:
  void the button.
  if the dialog is nil, exit.
  loop.
    get the button from the dialog's buttons.
    if the button is nil, exit.
    if the button's name is blank, repeat.
    put the button's name's first's target into a byte.
    uppercase the byte.
    if the byte is the key, exit.
  repeat.

to find a button given a spot:
  void the button.
  if the dialog is nil, exit.
  loop.
    get the button from the dialog's buttons.
    if the button is nil, exit.
    if the spot is in the button, exit.
  repeat.

to handle the dialog:
  if the dialog is nil, exit.
  flush all events.
  adjust the dialog.
  switch the bar to "dialog".
  handle events given the dialog.
  switch the bar to "normal" without drawing.
  if the answer is blank, show the desktop.
  if the dialog's text is nil, show the desktop.
  flush all events.
  refresh the cursor.

to handle an event given the dialog:
  if the event's kind is "key down",
    handle the event given the dialog (key down); exit.
  if the event's kind is "left click",
    handle the event given the dialog (left click); exit.
  if the event's kind is "left double click",
    handle the event given the dialog (left double click); exit.
  if the event's kind is "refresh",
    handle the event given the dialog (refresh); exit.
  if the event's kind is "right click",
    handle the event given the dialog (right click); exit.
  if the event's kind is "set cursor",
    handle the event given the dialog (set cursor); exit.

to handle an event given the dialog (copy):
  if nothing is selected in the dialog's text, cluck; exit.
  handle copy given the dialog's text.

to handle an event given the dialog (cut):
  if nothing is selected in the dialog's text, cluck; exit.
  handle cut given the dialog's text.
  show the desktop.

to handle an event given the dialog (key down - backspace key):
  handle the event given the dialog's text (backspace key).
  show the desktop.

to handle an event given the dialog (key down - choice):
  if the event's key is the enter key,
    put "yes" into the answer; relinquish control; exit.
  if the event's key is the escape key,
    put "cancel" into the answer; relinquish control; exit.
  find a button given the event's key.
  if the button is nil, exit.
  put the button's name into the answer.
  relinquish control.

to handle an event given the dialog (key down - delete key):
  handle the event given the dialog's text (delete key).
  show the desktop.

to handle an event given the dialog (key down - end key):
  handle the event given the dialog's text (end key).
  show the desktop.

to handle an event given the dialog (key down - enter key):
  extract the answer from the dialog's text.
  relinquish control.

to handle an event given the dialog (key down - error):
  cancel the dialog.

to handle an event given the dialog (key down - escape key):
  cancel the dialog.

to handle an event given the dialog (key down - home key):
  handle the event given the dialog's text (home key).
  show the desktop.

to handle an event given the dialog (key down - input):
  if the event is any shortcut,
    handle the event given the dialog (key down - shortcut); exit.
  if the event's byte is printable,
    handle the event given the dialog (key down - printable key); exit.
  if the event's key is the backspace key,
    handle the event given the dialog (key down - backspace key); exit.
  if the event's key is the delete key,
    handle the event given the dialog (key down - delete key); exit.
  if the event's key is the end key,
    handle the event given the dialog (key down - end key); exit.
  if the event's key is the enter key,
    handle the event given the dialog (key down - enter key); exit.
  if the event's key is the escape key,
    handle the event given the dialog (key down - escape key); exit.
  if the event's key is the home key,
    handle the event given the dialog (key down - home key); exit.
  if the event's key is the left-arrow key,
    handle the event given the dialog (key down - left-arrow key); exit.
  if the event's key is the right-arrow key,
    handle the event given the dialog (key down - right-arrow key); exit.

to handle an event given the dialog (key down - left-arrow key):
  handle the event given the dialog's text (left-arrow key).
  show the desktop.

to handle an event given the dialog (key down - printable key):
  handle the event given the dialog's text (printable key).
  show the desktop.

to handle an event given the dialog (key down - right-arrow key):
  handle the event given the dialog's text (right-arrow key).
  show the desktop.

to handle an event given the dialog (key down - shortcut):
  put the event's key in a key.
  if the key is the a-key, handle the event given the dialog (select all).
  if the key is the c-key, handle the event given the dialog (copy).
  if the key is the v-key, handle the event given the dialog (paste).
  if the key is the x-key, handle the event given the dialog (cut).
  if the key is the y-key, handle the event given the dialog (redo).
  if the key is the z-key, handle the event given the dialog (undo).

to handle an event given the dialog (key down):
  if the dialog's kind is "choice",
    handle the event given the dialog (key down - choice); exit.
  if the dialog's kind is "error",
    handle the event given the dialog (key down - error); exit.
  if the dialog's kind is "input",
    handle the event given the dialog (key down - input); exit.

to handle an event given the dialog (left click - choice):
  if the event's spot is not in the bar, cancel the dialog; exit.
  find a button given the event's spot.
  if the button is nil, exit.
  put the button's name into the answer.
  relinquish control.

to handle an event given the dialog (left click - error):
  if the event's spot is not in the bar,
    cancel the dialog; exit.
  find a button given the event's spot.
  if the button is nil, 
    put the dialog's prompt on the windows clipboard;
    put "Copied" into the status' string;
    linger the status;
    exit.
  put the button's name into the answer.
  relinquish control.

to handle an event given the dialog (left click - input):
  if the event's spot is not in the bar, cancel the dialog; exit.
  if the event's spot is in the dialog's text,
    track the dialog given the event; exit.
  find a button given the event's spot.
  if the button is nil, exit.
  if the button's name is "cancel", cancel the dialog; exit.
  extract the answer from the dialog's text.
  relinquish control.

to handle an event given the dialog (left click):
  if the dialog's kind is "choice",
    handle the event given the dialog (left click - choice); exit.
  if the dialog's kind is "error",
    handle the event given the dialog (left click - error); exit.
  if the dialog's kind is "input",
    handle the event given the dialog (left click - input); exit.

to handle an event given the dialog (left double click):
  if the dialog's text is nil, exit.
  handle the event given the dialog's text (left double click).
  show the desktop.

to handle an event given the dialog (paste):
  if there is not text on the windows clipboard, cluck; exit.
  handle paste given the dialog's text.
  show the desktop.

to handle an event given the dialog (redo):
  if the dialog's text cannot be redone, cluck; exit.
  handle redo given the dialog's text.
  show the desktop.

to handle an event given the dialog (refresh):
  show the desktop.

to handle an event given the dialog (right click):
  if the event's spot is in the bar, exit.
  cancel the dialog.

to handle an event given the dialog (select all):
  handle select all given the dialog's text.
  show the desktop.

to handle an event given the dialog (set cursor):
  if the event's spot is in the dialog's text,
    show the i-beam cursor; exit.
  show the arrow cursor.

to handle an event given the dialog (undo):
  if the dialog's text cannot be undone, cluck; exit.
  handle undo given the dialog's text.
  show the desktop.

to handle events given the dialog:
  deque an event.
  if the event is nil, exit.
  handle the event given the dialog.
  repeat.

a prompt is a string.

to put the trio allowance into a width:
    put 3 times the swatch width plus 1/2 inch into the width.

a question is a string.

to show error a string:
  create the dialog.
  put "error" into the dialog's kind.
  put the red color into the dialog's pen.
  put the string into the dialog's prompt.
  add a button to the dialog given "M'kay".
  cluck.
  handle the dialog.
  destroy the dialog.

to track the dialog given an event:
  if the dialog is nil, exit.
  if the dialog's text is nil, exit.
  if the event is nil, exit.
  extend any selection in the dialog's text given the event's spot.
  if the event's shift flag is not set, deselect the dialog's text.
  clear a selection.
  loop.
    if a flag is set, show the desktop with status.
    if the mouse's left button is up, exit.
    put the mouse's spot into a spot.
    autoscroll the dialog's text given the spot and the flag.
    extend any selection in the dialog's text given the spot.
    if the dialog's text's selection is the selection, repeat.
    set the flag.
    put the dialog's text's selection into the selection.
  repeat.
