\ Copyright 2014, 2017 by Jasper Paulsen.

This file is the start of a bug-tracking system
for the Plain English programming environment.
The Plain English programming environment is called Cal.
Currently, the file has a .txt extension,
so that it will not be compiled into the executable.

This file has outstanding issues.
Demoed fixes.txt has fixes that have been demonstrated,
                 but are not automatically regression tested.
Done issues.txt  explains how the issues are rated.
                 It has issues that are marked won't do,
                 and fixes that have been demonstrated
                     and automatically regression-tested.

\ ======================================
   
The following requests have been completed.
They are either marked won't do, or have been
both demonstrated and automatically regression tested.
The program's change log is implicit
in the source code repository's change log.
These items should occasionally be moved to done issues.txt.

 
\ ======================================
   
The following requests have been demonstrated, and have test plan(s),
but have not yet been automatically regression-tested.
These items should occasionally be moved to demoed fixes.txt.


\ ======================================
   
The following requests have been demonstrated,
but do not have test plans yet.
These items should occasionally be moved to demoed fixes.txt.
  
  
\ ======================================   
The following requests have been partially demonstrated.

245.  Remove number field from turtle's context.
  Status:  Partially demonstrated.
  Audience:  All users.
  Benefit:   Medium.
  Implementation difficulty:  Medium.  (But much easier
             than trying to both retain it and make
             the noodle not depend on the turtle.)
  Demoing difficulty:  Medium.
  Testing difficulty:  Not applicable.
  Requested by Gerry Rzeppa on May 29, 2017.

220.  Fix intermittent crashing bug(s) in editor.
  The editor can crash when attempting to scroll the scrollbar upward.
  The editor can crash when attempting to add characters
  within a row of text.  This problem has been observed
  both when the row was exactly the pad width,
  and when the row was much shorter than the pad width.
  This bug is very hard to reproduce.
  Status:  Partially demonstrated.
  Audience:  All users.
  Benefit:   Critical.
  Implementation difficulty:  Hard.
  Demoing difficulty:  n/a.
  Testing difficulty:  n/a.
  Requested by Jasper Paulsen on April 30, 2017.

209.  In characters, add nicknames for `~<>\[]{}| 
  Status:  Implemented.
  Audience:  Turtle programmers.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Easy.  Construct a string comprised
    of the nicknamed bytes, and verify that it equals
    a literal string with the same contents.
  Requested by Jasper Paulsen on April 4, 2017.
 
205.  In compiler, make "can't" negate "can", instead of "ca".
  Status:  Implemented.
  Audience:  Designed.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on March 13, 2017.
 
196.  In writer, get title of a page from first non-blank line, if possible.
  Status:  Implemented.
  Audience:  Application users.
  Benefit:  Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on March 13, 2017.
 
212.  In colors, add a rainbow color pen.
  Status:  Implemented.
  Audience:  Turtle programmers.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on March 13, 2017.


\ ======================================   
The following requests are roughly sorted
from higher priority to lower priority.

237.  Fix intermittent crashing bug(s) in writer.
  The writer can crash upon clicking outside of a line
  in order to de-select the line.  It can also crash while
  changing the size of a selection region.
  This bug is very hard to reproduce.
  Status:    Request.
  Audience:  Application users.
  Benefit:   Critical.
  Implementation difficulty:  Hard.
  Demoing difficulty:  n/a.
  Testing difficulty:  n/a.
  Requested by Jasper Paulsen on May 21, 2017.

250.  Replace long list of colors with color's <adverbs> shade.
  Per the designer of the colors, do not worry about backward
  compatibility -- existing programs have copies of
  noodle or color source files with the old definitions.
  Status:    Designed.
  Audience:  Programmers.
  Benefit:   Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Not applicable.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on May 29, 2017.

238.  Add scrollbar to the finder.
  Status:   Request.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2014.

239.  Add mouse scrolling to the finder.
  Status:   Request.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2014.

176.  Add a "Measure Code" menu item.
  Output a text file with the following columns:
  source   code lines  just comments   blank lines  code wraps  total lines
  with one line for each source file in the folder,
  and one line for the totals.
  Use tab-separated variable format.
  Save as <exe name>.tsv
  Status:  Request.
  Audience:  Programmers
  Benefit:   Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 23, 2017.

016.  Mark the tabs to indicate files with unsaved edits.
  For example, put a "*" before the name of each unsaved file.
  Audience:  programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

172.  From "the noodle", factor out command-line parsing into a "commands" file.
  Status:  request.
  Audience:  Programmers.
  Benefit:   minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Not applicable.
  Testing difficulty:  Not applicable.
  Requested by Jasper Paulsen on March 20, 2017.

177.  Let user create shell shortcuts.
  Status:  request.
  Implementation difficulty:  Hard.
  Demoing difficulty:  medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on April 4, 2017.

198.  In finder, allow running a .lnk file.
  Status:  Designed.
  Audience:  Application users.
  Benefit:  Medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on April 4, 2017.

199.  In finder, allow creating a .lnk file.
  Status:  Designed.
  Audience:  Application users.
  Benefit:  Medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on April 4, 2017.

243.  Invert the dE-2000 formula to choose a similar looking color.
  http://www.colorwiki.com/wiki/Delta_E:_The_Color_Difference
  http://www.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf
  Status:  Request.
  Audience:  Turtle programmers.
  Benefit:   Medium.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Medium.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on May 22, 2017.

021.  Make it easy to search all files that are open,
regardless of whether the file's tab is visible.
  Status:  request.
  Audience:  programmers.
  Implementation difficulty:  easy.
  Demoing difficulty:  medium.
  Testing difficulty:  medium.
  Benefit:  Important -- this will help break large source
            files into smaller files.
  Requested by Jasper Paulsen on March 7, 2014.

024.  Make it easy to search all files in a project,
regardless of whether the file is open in the editor.
If the the search item finds files that are not open yet,
open the files that are found.
  Status:  request.
  Audience:  programmers.
  Implementation difficulty:  medium.
  Demoing difficulty:  medium.
  Testing difficulty:  medium.
  Benefit:  Important -- this will help break large source
            files into smaller files.
  Requested by Jasper Paulsen on March 7, 2014.

025.  Update the documentation to discuss searching multiple files.
  Audience:  programmers.
  Status:  request.
  Benefit:  Important -- the documentation needs to be accurate.
  Implementation difficulty:  Medium.
  Demo difficulty:  Easy.
  Test difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.

033.  Have an option to continue searching from the beginning.
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

217.  Allow drawing a Unicode string on-screen.
  Status:    Request.
  Audience:  Windows programmers.
  Benefit:   Minor.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on April 25, 2017.

218.  Change the tabstrip's ellipsis character in proportional fonts.
  If there is not enough space in a tab for a full descriptor,
  the descriptor is abbreviated.  In fixed-width fonts,
  the ellipsis character is "…".  To save space, proportional
  fonts use "„".  The unicode "modifier letter low tilde" (U+02F7)
  would look better, and be less confusing, in proportional fonts.
  Status:    Request.
  Benefit:   Minor.
  Implementation difficulty:  Easy, if can draw Unicode strings on-screen.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on April 25, 2017.

219.  From "the editor", factor out blocks and sorting code into a "text sorter" file.
  Status:    Designed.  Do after project can handle multiple folders.
  Audience:  Programmers.
  Benefit:   Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Not applicable.
  Testing difficulty:  Not applicable.
  Requested by Jasper Paulsen on April 27, 2017.
 
094.  Document "Plain English programming idioms",
  and how they compare to other common programming languages.
  Implementation difficulty:  Hard.
  Testing difficulty:  Profound.
  Requested by Jasper Paulsen on March 15, 2014.

126.  A way to export CAL's tabs' source names and labels.
  Benefit:  Medium.  Would make it easier to test some features.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on March 1, 2017.

123.  A way to test event queueing and dequeing.
  Currently, enque and deque go through a global event queue.
  It would be good to be able to verify that events can be
  processed without affecting the user-visible state of CAL.
  Benefit:  Major.  Many features are currently untested
            because of this issue.  Also, writing the code
            to take a windows message, create an event,
            enque and deque the event, and pass the event
            to a handler method is error-prone.
  Implementation difficulty:  Hard.
  Demoing difficulty:  n/a (use tests instead)
  Testing difficulty:  Medium (once implemented).
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on February 28, 2017.

050.  On WINE systems, prevent the following error messages:
  Currently, the "wine cmd" shell reports something like the following after Cal quits:
err:ole:CoGetClassObject class {96749377-3391-11d2-9ee3-00c04f797396} not registered
err:ole:CoGetClassObject class {96749377-3391-11d2-9ee3-00c04f797396} not registered
err:ole:create_server class {96749377-3391-11d2-9ee3-00c04f797396} not registered
err:ole:CoGetClassObject no class object {96749377-3391-11d2-9ee3-00c04f797396} could be created for context 0x7
  Audience:  Linux programmers.
  Status:  request.
  Benefit:  Important.  This problem is caused by the talker failing to find
    WINE's sapi.dll; this failure prevents Linux users from listening
    to CAL's text-to-speech features.
  Implementation difficulty:  Profound.
  Demo difficulty:  Hard, unless the programmer is using WINE (which makes it easy).
  Test difficulty:  Profound.
  Requested by Jasper Paulsen on March 7, 2014.

092.  Document how to use git to manage the code.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Medium.
  Testing difficulty:  Profound.
  Requested by Gerry Rzeppa on March 7, 2014.

093.  Document how to use GitHub to share the code.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Profound.
  Requested by Gerry Rzeppa on March 7, 2014.

066.  Allow user to enter font heights in decimal inches.
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

031.  Regularly back up unsaved work, in temporary files.
  Delete each temporary file after successfully
    saving the corresponding real file.
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

041.  Use the correct number of pixels per inch.
  Currently, Cal assumes that there are 96 pixels per inch.
  Various versions of Windows (or its Control Panel options)
  can have different pixel densities,
  such as 72, 96, 120, 144, 150, et cetera pixels per inch.
  Benefit:  Minor.
  Implementation difficulty:  Profound.  Windows lies about
    the screen resolution to any program that is not
    registered as understanding screen resolutions.
    Even when Windows does not lie by saying 96 dpi,
    it approximates the answer to 96 dpi, 120 dpi, or 144 dpi.
    It needs a short procedure, but the procedure
    will need to make a Windows API call.  Also, there are
    several places in the code that implicitly use 96 ppi.
  Audience:  Windows programmers.  (specifically, those who
    have pixel densities other than 96 pixels per inch.)
  Demoing difficulty:  Hard.  Changing the Windows pixel density
    requires re-starting the computer.
  Testing difficulty:  Profound.
  Status:  request.
  Requested by Jasper Paulsen on March 7, 2014.

086.  Dynamically adjust the yank submenu based on the twips per pixel.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Benefit:  Minor.
  Status: request.
  Requested by Jasper Paulsen on March 12, 2014.

051.  On WINE systems, prevent the following error message:
  Currently, the "wine cmd" shell reports something like the following after Cal quits:
err:ole:CoInitializeEx Attempt to change threading model of this apartment from multi-threaded to apartment threaded
  Audience:  Linux programmers.
  Status:  request.
  Implementation difficulty:  Profound.
  Benefit:  minor.
  Demo difficulty:  Hard, unless the programmer is using WINE (which makes it easy).
  Test difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

035.  Indent the contents of loops.
  Pretty print loops so that the row(s) after Loop: and before Repeat
  are indented twice as much as the Loop: statement.
  Status:  request.
  Audience:  Windows programmers and Linux programmers.
  Benefit:  minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

223.  Make the editor's Capitalize feature generate sentence case.
  The Capitalize feature does not work the way its authors intended.
  It is supposed to just capitalize the first words of sentences.
  It is not supposed to capitalize the first words of lines
  that are part of sentences started on earlier lines.
  Status:    Request.
  Audience:  Programmers.
  Benefit:   Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on April 30, 2017.

133.  Allow marking comments in the vertical scroll bar.
  Benefit:  Medium.  Would make it easier to find
            major section breaks in source code by scrolling.
  Implementation difficulty:  Medium.
            Might be hard to make run efficiently.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on March 1, 2017.

134.  Allow marking "find requests" in the vertical scroll bar.
  Benefit:  Medium.  Would make it easier to skip
            repeated items in a search, or go back
            to a skipped item.
  Implementation difficulty:  Medium.
            Might be hard to make run efficiently.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on March 1, 2017.

036.  Implement code-folding.  (Part 1)
  For example, it would be nice to view a summarized list
    of these feature requests.
  It would also be nice to be able to scroll through
    all of the procedure headers in a file, in just a few screens.
  The status is a request.  A simple version could be implemented by:
    just display the first row of each block,
    hide the blank lines between blocks,
    show a symbol that the code has been abbreviated,
    allow the user to click on the symbol to see the rest of the block,
    have a "fold all" feature and an "unfold all" feature.
  The benefit is important -- it will help find code,
    and help know what features are available.
    This will help the system scale to have more features.
  The difficulty level is medium.
  The testing difficulty is medium.
  The audience is programmers.
  Requested by Jasper Paulsen on March 7, 2014.

037.  Implement code-folding.  (Part 2)
  For example, it would be nice to view a summarized list
    of these feature requests, with the implementation difficulty,
    demoing difficulty, testing difficulty, benefit rating,
    audience, and status all in the summary.
  The status is a request.  It would be possible to have a request
    output a two-line summary, and have the code-folding feature
    (from Part 1) show the two line summary.
  The difficulty level is medium.
  The testing difficulty is medium.
  The audience is programmers.
  Requested by Jasper Paulsen on March 7, 2014.

054.  Add namespaces.
  Several features currently use names that would be very handy
    for describing parts of new features.
  This pre-emption makes it far more difficult to add features.
  The audience is programmers.
  The implementation difficulty is profound.
  The testing difficulty is medium.
  Benefit: Very important.
  Requested by Jasper Paulsen on March 7, 2014.
  
040.  Reduce the font leading (in fonts other than the old default font).
  Currently, fonts like Courier New have a large gap between rows.
  This gap is much larger than in other text editors,
  such as gedit or Notepad.
  This leading could be reduced to typical heights.
  Benefit:  Minor.
  Audiences:  Windows programmers and Linux programmers.
  Status:  Request.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

004.  Allow true vertical panning.
  Currently, the user can pan a text document
  by right-clicking and dragging the mouse.
  Unfortunately, this often causes the text to move over to the left,
  so that the left part of the text is off the screen.
  This is disorienting.
  The current work-around is to pan up-and-to-the-right,
  or pan down-and-to-the-right.
  It would be possible to modify
     the right-click-and-drag mouse event handler
     so that if the item being viewed is a text file,
     and the absolute value of the mouse's change in x is less
     than an arbitrary fraction of
     the absolute value of the mouse's change in y,
     the pan is purely vertical.
  The audiences are Windows programmers and Linux programmers.
  The benefit is important -- the non-vertical panning
  is very jarring to new users of the system.
  The status is designed.
  Implementation would be easy.
  Demoing would be easy.
  Testing would be easy.  The test could propose
    possible mouse event delta-x and delta-y values,
    and verify that the editor can compute
    the intended delta-x and delta-y values.
    The test would not need to actually pan the screen.
  Requested by Jasper Paulsen on March 7, 2014.

017.  Automate collecting the unit tests.
In practice, automated testing needs tool support for building test suites.
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- this makes testing much easier.
  Implementation difficulty:  Medium.
  Demo difficulty:  Easy.
  Test difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

020.  Provide wrappers and/or documentation for the hash map feature.
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- this makes many algorithms easier.
  Implementation difficulty:  Medium.
  Demo difficulty:  Medium.
  Test difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

091.  Allow using mouse and windows events to change the window size at run-time.
  Currently, the main window is fixed at the top-left corner of the screen.
  As of March 15, 2014, the main window's size has one of two sizes:
  full screen, or a "restored" size that is calculated at startup.
  Currently, the program does not have mouse cursors available
  for changing widths, changing heights, nor dragging window corners.
  When the mouse is close to the edges of the window, and the window
  is in "restore" mode, change the cursor accordingly.
  If the user clicks-and-drags the mouse
  while the mouse has such a cursor,
  adjust the window size and location.  Do not allow the window height
  or width to exceed the corresponding screen dimension.
  Status:  request.
  Audience:  Windows programmers and Linux programmers.
  Benefit:  Minor.  It will allow users to adjust the size of Cal
            depending on how important their distractions from Cal are.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Easy.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

014.  Update the documentation after new cursors are added.
  Status:  request.
  Benefit:  Important -- the documentation needs to be accurate.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.

012.  If there are multiple rows of menu letters, fade out the irrelevant row(s)
while a letter's menu is visible.
  Audience:  Windows programmers and Linux programmers.
  Benefit:  Important.  This will mitigate the confusion
    caused by folding the menu bar.
  Implementation difficulty:  Medium.
  Demoing difficulty: Hard (without the ability
    to adjust the main window's width at run time);
    Easy (if the user can adjust the main window's width at run time).
  Testing difficulty:  Hard.
  Status:  request.
  Requested by Jasper Paulsen on March 7, 2014.

028.  Update the documentation (or F1-help, or a wiki) to discuss scrolling via the Ctrl-Home and Ctrl-End keys.
  Audience:  programmers.
  Status:  request.
  Benefit:  Minor - this would make it easier to navigate in large files.
  Implementation difficulty:  Easy.
  Demo difficulty:  Easy.
  Test difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.
    
042.  Use border shading to suggest whether a button is pressed in.
  Audience:  Windows programmers -- this was a feature of Visual Basic.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

034.  Have an option to search upward, such as Shift-F3.
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Might do more harm than good.
            CAL does not have the Shift-<feature> idiom
            to perform a <feature> in the opposite direction.
            For example, it uses Ctrl-I and Ctrl-O
            to indent and outdent, instead of Tab and Shift-Tab.
            Also, each CAL feature should be accessible
            from the menu.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

170.  Add scrollbar to writer's page editing feature.
  Status:   Request.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.

171.  Add mouse scrolling to writer's page editing feature.
  Status:   Request.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.

160.  Make new editor panes use recent pane(s)' font name.
  Status:   Request.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.

161.  Make new editor panes use recent pane(s)' font height.
  Status:   Request.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.

055.  Add an array feature (either dynamic or fixed length).
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- many numerical and geographical programs use arrays.
  Implementation difficulty:  Hard.
  Demo difficulty:  Medium.
  Test difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

056.  Allow re-sizing arrays.
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- this makes many algorithms easier.
  Implementation difficulty:  Hard.
  Demo difficulty:  Medium.
  Test difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

057.  Document the array feature(s).
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- this makes many algorithms easier.
  Implementation difficulty:  Medium.
  Demo difficulty:  Easy.
  Test difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.

179.  Use more precise and accurate timing ticks.
  Status:  request.
  Audience:  Programmers.
  Benefit:  Important.
  Implementation difficulty:  Profound.  Requires support for 64-bit numbers.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on April 4, 2017.

178.  Time each test, from test creation to stashing of result.
  Status:  request.
  Audience:  Programmers.
  Benefit:  Important.
  Implementation difficulty:  Profound.  Requires support for 64-bit numbers.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on April 4, 2017.

180.  If tests pass, show the tests that took the longest amounts of time.
  Status:  request.
  Audience:  Programmers.
  Benefit:  Important.  Would be a simple profiling tool.
  Implementation difficulty:  Profound.  Requires support for 64-bit numbers.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium. 
  Requested by Jasper Paulsen on April 4, 2017.

059.  Implement enumerated types.
  For example, it would be nice to have
    an enumerated type of difficulty rating levels.
  The difficulty level is profound, because it requires namespaces.
  The testing difficulty is medium.
  The status is a request.
    Java has a good model for how enumerated types should work.
  The audience is Linux programmers.
  The benefit is minor.
  Requested by Jasper Paulsen on March 7, 2014.

048.  Use shading to better distinguish the active tab from inactive tab(s).
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

058.  Show the line number(s) in the left margin.
  Audience:  Linux programmers -- IntelliJ has this feature.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.
  
216.  Fillet the top corner(s) of the active tab.
  Status:    Request.
  Audience:  Application users.
  Benefit:   Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on April 25, 2017.

060.  Allow the user to change fonts of user interface features.
  For example, the menus, the status bar, and the tab-strip.
  This can be a configuration file Easter egg.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Benefit:  minor.
  Status: request.
  Requested by Jasper Paulsen on March 7, 2014.

064.  Allow user to enter font heights in points (72nds of inches).
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

008.  Change the default font for first-time users.
  If the system has "Courier New" available, use it.
  If "Courier New" is not available, try "Arial".
  If "Arial" is not available, use "Times New Roman".
  Benefit:  Very important -- many potential users did not even try
            the system, because the first font they saw was the old
            default font, and they did not see how to change the font.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Profound.  (Because the demonstrator will
            not be a first-time user.)
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

099.  Use a checkmark instead of a highlight color for the current font height.
  Audience:  All users.
  Status:  request.
  Benefit:  Might do more harm than good.
    The 8-bit ASCII character set does not include a checkmark.
    This is probably why Microsoft's implementation of checkmarked menus
    uses a custom hard-coded bitmap.  The closest 8-bit ascii characters
    are the bullet (#149) and the generic currency sign (#164).
    There are other symbols that look sort of like checkmarks
    (if you squint hard enough), but they mean "not", not "selected".
    Using unicode character #10003 or #10004 (#x2713 or #x2714)
    would produce a checkmark, but would require the compiler
    to deal gracefully with Unicode strings.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on March 18, 2014.

065.  Allow splitting an editor window into a top section and a bottom section,
with an adjustable slider between them.
  Audience:  Windows programmers -- this was a feature of Visual Basic.
  Status:  request.
  Benefit:  Possibly does more harm than good.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

047.  Use subtle shading to hint at the edges of the text editing area.
  Status:  request.
  Audience:  Windows programmers.
  Benefit:  minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.


\ ======================================
Unsorted requests:


Next item number:  251.


