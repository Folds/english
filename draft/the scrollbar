\ The portions of this file that are from CAL-3040
\ are copyright 2006 by the Osmosian Order.
\ The remainder is copyright 2014, 2017 by Jasper Paulsen.

to adjust a scrollbar:
  get a height called cabheight (scrollbar cab height).
  put the scrollbar's cab's top plus the cabheight
    in the scrollbar's cab's bottom.
  put the scrollbar's box's height
    minus the scrollbar's uptick's height
    minus the scrollbar's downtick's height
    minus the cabheight
    in a number called range.
  put the range into a number called position.
  get a ratio of invisible rows.
  scale the position given the ratio.
  put the scrollbar's uptick's bottom plus the position
    in the scrollbar's cab's top.
  put the scrollbar's cab's top plus the cabheight
    in the scrollbar's cab's bottom.
  put the scrollbar's cab's top in the scrollbar's uppage's bottom.
  put the scrollbar's cab's bottom in the scrollbar's downpage's top.

an arrow is a polygon.

to convert a count to a height given a document (invert scrollbar drag):
  put the scrollbar's box's height
    minus the scrollbar's uptick's height
    minus the scrollbar's cab's height
    minus the scrollbar's downtick's height
    in a height called range.
  get another count of invisible pages given the document.
  put the range and the other count in a ratio. \ scrollbar twips per page
  put the count in the height.
  scale the height given the ratio.

to convert a count to a height given a source (invert scrollbar drag):
  if the source is nil, put 0 in the height; exit.
  put the scrollbar's box's height
    minus the scrollbar's uptick's height
    minus the scrollbar's cab's height
    minus the scrollbar's downtick's height
    in a height called range.
  count the invisible rows of the source's text returning another count.
  put the range and the other count in a ratio. \ scrollbar twips per row
  put the count in the height.
  scale the height given the ratio.

to convert a height to a count given a document (scrollbar drag):
  put the scrollbar's box's height
    minus the scrollbar's uptick's height
    minus the scrollbar's cab's height
    minus the scrollbar's downtick's height
    in a height called range.
  get another count of invisible pages given the document.
  put the other count and the range in a ratio. \ pages per scrollbar twip
  put the height in the count.
  scale the count given the ratio.

to convert a height to a count given a source (scrollbar drag):
  put the scrollbar's box's height
    minus the scrollbar's uptick's height
    minus the scrollbar's cab's height
    minus the scrollbar's downtick's height
    in a height called range.
  count the invisible rows of the source's text returning another count.
  put the other count and the range in a ratio. \ rows per scrollbar twip
  put the height in the count.
  scale the count given the ratio.

to count the invisible rows of a text returning a number:
  if the text is nil, put 0 in the number; exit.
  count the visible rows of the text returning another number.
  put the text's row count minus the other number in the number.

\ the text's row count is the last row of the text.

\ 1 is the first row of the text.

to count the visible rows of a text returning a number:
  if the text is nil, put 0 in the number; exit.
  put the text's box's y-extent divided by the text's row height
    in the number.

to create a scrollbar:
  create the scrollbar's uptick.
  create the scrollbar's uppage.
  create the scrollbar's cab.
  create the scrollbar's downpage.
  create the scrollbar's downtick.

to decide if a command is left-clicked:
  if the mouse's left button is up, say no.
  if the mouse's spot is in the command, say yes.
  say no.

to decide if a command is wafer thin:
  if the command's roundy box is wafer thin, say yes.
  say no.

to decide if an event is in a scrollbar:
  if the scrollbar is not needed, say no.
  if the event's spot is in the scrollbar's box, say yes.
  say no.

to decide if a mode is never scrollable:
  if the mode is sometimes scrollable, say no.
  say yes.

to decide if a mode is sometimes scrollable:
  if the mode is "editor", say yes.
  if the mode is "docster", say yes.
  say no.

to decide if a roundy box is wafer thin:  
  if the roundy box's top  is the roundy box's bottom, say yes.
  if the roundy box's left is the roundy box's right,  say yes.
  if the roundy box's top  plus the tpp is the roundy box's bottom, say yes.
  if the roundy box's left plus the tpp is the roundy box's right,  say yes.
  say no.

to decide if the scrollbar is needed:
  if the current tab is nil, say no.
  if the current tab's mode is never scrollable, say no.
  if the scrollbar is needed (editor), say yes.
  if the scrollbar is needed (docster), say yes.
  say no.

to decide if the scrollbar is needed (docster):
  if the current tab is nil, say no.
  if the current tab's mode is not "docster", say no.
  if the current tab's node is nil, say no.
  get a count of leading invisible pages given the current tab's node's document.
  if the count is positive, say yes.
  get another count of trailing invisible pages given the current tab's node's document.
  if the other count is positive, say yes.
  say no.

to decide if the scrollbar is needed (editor):
  if the current tab is nil, say no.
  if the current tab's mode is not "editor", say no.
  if the current tab's node is nil, say no.
  if the current tab's node's source is nil, say no.
  if the current tab's node's source's text is nil, say no.
  put the current tab's node's source's text's row count in a count.
  count the visible rows of the current tab's node's source's text
    returning another count.
  if the count is greater than the other count, say yes.
  say no.

to decide if a spot is in the scrollbar:
  if the scrollbar is not needed, say no.
  if the spot is in the scrollbar's box, say yes.
  say no.

to destroy a scrollbar:
  destroy the scrollbar's uptick.
  destroy the scrollbar's uppage.
  destroy the scrollbar's cab.
  destroy the scrollbar's downpage.
  destroy the scrollbar's downtick.

to draw an arrow in a command:
  privatize the arrow.
  center the arrow in the command's roundy box.
  draw the arrow with the black color and the light gray color.

to draw down arrow in a command:
  create an arrow.
  initialize the arrow.
  draw the arrow in the command.
  destroy the arrow.

to draw a scrollbar:
  draw the scrollbar's uptick.
  draw up arrow in the scrollbar's uptick.
  if the scrollbar's uppage is not wafer thin,
    draw the scrollbar's uppage.
  draw the scrollbar's cab.
  if the scrollbar's downpage is not wafer thin,
    draw the scrollbar's downpage.
  draw the scrollbar's downtick.
  draw down arrow in the scrollbar's downtick.

to draw up arrow in a command:
  create an arrow.
  initialize the arrow.
  flip the arrow.
  draw the arrow in the command.
  destroy the arrow.

to estimate character width given a font returning a ratio:
  \ Common characters in the New York Times from January to March 1992,
  \ per http://www.indiana.edu/~clcl/Papers/LFE.pdf
  put "AIMa abcde eeefg hiilm nnoop rrsst ttuwy ""',,. .01" in a string.
  get a width given the string and the memory canvas and the font.
  put the width and the string's length into the ratio.

to finalize a scrollbar:
  destroy the scrollbar.

to find a command given a scrollbar and a spot:
  void the command.
  if the spot is in the scrollbar's uptick,
    put the scrollbar's uptick in the command; exit.
  if the spot is in the scrollbar's uppage,
    put the scrollbar's uppage in the command; exit.
  if the spot is in the scrollbar's downpage,
    put the scrollbar's downpage in the command; exit.
  if the spot is in the scrollbar's downtick,
    put the scrollbar's downtick in the command; exit.

to get the default fast horizontal scroll speed returning a number:
  put 3 in the number.
  if the current tab is nil, exit.
  if the current tab's mode is not "editor", exit.
  if the current tab's source is nil, exit.
  if the current tab's source's text is nil, exit.
  if the current tab's source's text's characters/box is less than 2,
    put 1 in the number; exit.
  put the current tab's source's text's characters/box minus 1 in the number.

to get the default fast scroll speed returning a number:
  put 3 in the number.
  if the current tab is nil, exit.
  if the current tab's mode is not "editor", exit.
  if the current tab's source is nil, exit.
  if the current tab's source's text is nil, exit.
  if the current tab's source's text's rows/box is less than 2,
    put 1 in the number; exit.
  put the current tab's source's text's rows/box minus 1 in the number.

to get the first visible row number of a text returning a number:
  put - the text's y in another number.
  put the other number divided by the text's row height in a count.
  put the count plus 1 in the number.

to get a height (scrollbar cab height):
  put 1/4 inch in the height.
  if the current tab is nil, exit.
  if the current tab's node is nil, exit.
  if the current tab's mode is "editor",
    get the height given the current tab's node's source
      (scrollbar cab height); exit.
  if the current tab's mode is "docster",
    get the height given the current tab's node's document
      (scrollbar cab height); exit.

to get a height given a document (scrollbar cab height):
  put the scrollbar's box's height
    minus the scrollbar's uptick's height
    minus the scrollbar's downtick's height
    into the height.
  if the height is less than 1/4 inch, exit.
  if the document is nil, exit.
  get a page from the document's pages.
  if the page is nil, exit.
  put the page's edge into a box.
  globalize the box given the document's origin.
  get another page from the document's pages (backwards).
  if the other page is nil, exit.
  put the other page's edge into another box.
  globalize the other box given the document's origin.
  put the other box's bottom minus the box's top 
    into a height called total edge height.
  put the document's bottom minus the document's top
    into a height called document height.
  put the document height and the total edge height into a ratio.
  if the ratio's numerator is greater than the ratio's denominator,
    put 1 into the ratio.
  scale the height given the ratio.
  if the height is less than 1/4 inch,
    put 1/4 inch into the height.

to get a height given a source (scrollbar cab height):
  if the source is nil, exit.
  get the height given the source's text (scrollbar cab height).

to get a height given a text (scrollbar cab height):
  put 1 and 1 into a ratio.
  if the text is not nil,
    count the visible rows of the text returning a count;
    put the count and the text's row count into the ratio.
  if the ratio's numerator is greater than the ratio's denominator,
    put 1 into the ratio.
  put the scrollbar's box's height
    minus the scrollbar's uptick's height
    minus the scrollbar's downtick's height
    into the height.
  if the height is less than 1/4 inch, exit.
  scale the height given the ratio.
  if the height is less than 1/4 inch,
    put 1/4 inch into the height.

to get the horizontal scroll speed returning a number:
  if the stashed horizontal scroll speed is 0,
    stash horizontal scroll speed.
  if the stashed horizontal scroll speed is less than 0,
    get the default fast horizontal scroll speed returning the number;
    exit.
  put the stashed horizontal scroll speed in the number.

to get the horizontal scroll speed returning a number (from windows):
  clear the number.
  call "user32.dll" "SystemParametersInfoA"
    with 108 [SPI_GETWHEELSCROLLCHARS] and 0 [not used]
    and the number's whereabouts and 0 [not used].

\ https://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx
\ lists the System Parameters Info (SPI) constants.

to get a ratio of invisible rows:
  put 1 and 2 in the ratio.
  if the current tab is nil, exit.
  if the current tab's node is nil, exit.
  if the current tab's mode is "editor",
    get the ratio of invisible rows
      given the current tab's node's source; exit.
  if the current tab's mode is "docster",
    get the ratio of invisible pages
      given the current tab's node's document; exit.

to get a ratio of invisible rows given a source:
  put 1 and 2 in the ratio.
  if the source is nil, exit.
  get the ratio of invisible rows given the source's text.

to get a ratio of invisible rows given a text:
  get the first visible row number of the text returning a number.
  put the number minus 1 in a number called top.
  count the visible rows of the text returning another number.
  if the text is nil, put 0 in a number called invisible.
  if the text is not nil,
    put the text's row count minus the other number in the invisible.
  if the invisible is less than the top,
    put the top and the top in the ratio; exit.
  put the top and the invisible in the ratio.

to get the scroll speed returning a number:
  if the stashed scroll speed is 0,
    stash scroll speed.
  if the stashed scroll speed is less than 0,
    get the default fast scroll speed returning the number;
    exit.
  put the stashed scroll speed in the number.

to get the scroll speed returning a number (from windows):
  clear the number.
  call "user32.dll" "SystemParametersInfoA"
    with 104 [SPI_GETWHEELSCROLLLINES] and 0 [not used]
    and the number's whereabouts and 0 [not used].

to handle downtick:
  if the current tab is nil, exit.
  if the current tab's node is nil, exit.
  if the current tab's mode is "editor",
    handle downtick given the current tab's node's source; exit.
  if the current tab's mode is "docster",
    handle downtick given the current tab's node's document; exit.

to handle downtick given a document:
  hide the cursor.
  put the edge height into a difference's y.
  negate the difference's y.
  scroll the document given the difference.
  show the desktop with status.
  wait for 50 milliseconds.
  if the scrollbar's downtick is left-clicked, repeat.

to handle downtick given a source:
  hide the cursor.
  handle downtick given the source's text.
  show the desktop with status.
  wait for 50 milliseconds.
  if the scrollbar's downtick is left-clicked, repeat.

to handle downtick given a text:
  if the text is nil, exit.
  put the text's vertical scroll flag in a flag called old flag.
  set the text's vertical scroll flag.
  scroll the text down one line.
  put the old flag in the text's vertical scroll flag.

to handle an event (left click - scrollbar):
  if the event's spot is in the scrollbar's cab,
    scroll given the event (scrollbar drag); exit.
  find a command given the scrollbar and the event's spot.
  handle the command.

to handle an event (mouse horizontal scroll speed changed):
  stash horizontal scroll speed.

to handle an event (mouse horizontal wheel):
  if the event is nil, exit.
  if the current tab is nil, exit.
  if the current tab's mode is not "editor", exit.
  \ the docster only scrolls vertically, not horizontally.
  if the event is modified, exit.
  put the event's byte in a mouse wyrd.
  \ The scrollbar behaves opposite to "right-click and push",
  \ so let right-click and push take precedence:
  if right is implied by the mouse wyrd, exit.
  if the event's key is 0, exit.
  get the horizontal scroll speed returning a number called speed.
  if the speed is 0, exit.
  put 120 [WHEEL_DELTA] divided by the speed in a number called roll quantum.
  if the event's key and the unprocessed horizontal mouse roll are not similarly signed,
    put 0 in the unprocessed horizontal mouse roll.
  add the event's key to the unprocessed horizontal mouse roll.
  put the unprocessed horizontal mouse roll in a number.
  de-sign the number.
  if the number is less than the roll quantum, exit.
  get the sign of the unprocessed horizontal mouse roll returning a number called sign.
  put the number divided by the roll quantum in a number called quanta.
  put the sign times the quanta in a count called requested quanta.
  if the current tab's mode is "editor",
    horizontal scroll the current tab's source given the requested quanta;
    show the desktop with status.
  put the requested quanta times the roll quantum in a number called requested roll.
  subtract the requested roll from the unprocessed horizontal mouse roll.

to handle an event (mouse scroll speed changed):
  stash scroll speed.

to handle an event (mouse wheel):
  if the event is nil, exit.
  if the event's shift flag is set,
    handle the event (shift mouse wheel); exit.
  if the scrollbar is not needed, exit.
  if the event is modified, exit.
  put the event's byte in a mouse wyrd.
  \ The scrollbar behaves opposite to "right-click and push",
  \ so let right-click and push take precedence:
  if right is implied by the mouse wyrd, exit.
  if the event's key is 0, exit.
  get the scroll speed returning a number called speed.
  if the speed is 0, exit.
  put 120 [WHEEL_DELTA] divided by the speed in a number called roll quantum.
  if the event's key and the unprocessed mouse roll are not similarly signed,
    put 0 in the unprocessed mouse roll.
  add the event's key to the unprocessed mouse roll.
  put the unprocessed mouse roll in a number.
  de-sign the number.
  if the number is less than the roll quantum, exit.
  get the sign of the unprocessed mouse roll returning a number called sign.
  put the number divided by the roll quantum in a number called lines.
  put the sign times the lines in a count called requested lines.
  if the current tab's mode is "editor",
    scroll the current tab's source given - the requested lines;
    show the desktop with status.
  if the current tab's mode is "docster",
    scroll the current tab's node's document down given - the requested lines;
    show the desktop with status.
  put the requested lines times the roll quantum in a number called requested roll.
  subtract the requested roll from the unprocessed mouse roll.

to handle an event (shift mouse wheel):
  if the event is nil, exit.
  if the current tab is nil, exit.
  \ Some users (especially of Macintoshes)
  \ use Shift-mouse-scrolling
  \ to request horizontal mouse scrolling.
  \ Perform a horizontal mouse scroll,
  \ but use the parameters of the event
  \ and the speed setting of the vertical mouse scroll.
  \ Shift-mouse scrolling is much easier and more accurate
  \ than horizontal mouse scrolling.
  if the current tab's mode is not "editor", exit.
  \ the docster only scrolls vertically, not horizontally.
  if the event is modified, exit.
  if the event's shift flag is not set, exit.
  put the event's byte in a mouse wyrd.
  \ The scrollbar behaves opposite to "right-click and push",
  \ so let right-click and push take precedence:
  if right is implied by the mouse wyrd, exit.
  if the event's key is 0, exit.
  get the scroll speed returning a number called speed.
  if the speed is 0, exit.
  put 120 [WHEEL_DELTA] divided by the speed in a number called roll quantum.
  if the event's key and the unprocessed horizontal mouse roll are not similarly signed,
    put 0 in the unprocessed horizontal mouse roll.
  add the event's key to the unprocessed horizontal mouse roll.
  put the unprocessed horizontal mouse roll in a number.
  de-sign the number.
  if the number is less than the roll quantum, exit.
  get the sign of the unprocessed horizontal mouse roll returning a number called sign.
  put the number divided by the roll quantum in a number called quanta.
  put the sign times the quanta in a count called requested quanta.
  if the current tab's mode is "editor",
    horizontal scroll the current tab's source given - the requested quanta;
    show the desktop with status.
  put the requested quanta times the roll quantum in a number called requested roll.
  subtract the requested roll from the unprocessed horizontal mouse roll.

to handle page down:
  if the current tab is nil, exit.
  if the current tab's node is nil, exit.
  if the current tab's mode is "editor",
    handle page down given the current tab's node's source; exit.
  if the current tab's mode is "docster",
    handle page down given the current tab's node's document; exit.

to handle page down given a document:
  if the document is empty, exit.
  hide the cursor.
  scroll the document down one page.
  show the desktop with status.
  wait for 200 milliseconds.
  if the scrollbar's downpage is left-clicked, repeat.

to handle page down given a source:
  if the source is nil, exit.
  hide the cursor.
  handle page down given the source's text.
  show the desktop with status.
  wait for 200 milliseconds.
  if the scrollbar's downpage is left-clicked, repeat.

to handle page down given a text:
  if the text is nil, exit.
  put the text's vertical scroll flag in a flag called old flag.
  set the text's vertical scroll flag.
  scroll the text down one page.
  put the old flag in the text's vertical scroll flag.

to handle page up:
  if the current tab is nil, exit.
  if the current tab's node is nil, exit.
  if the current tab's mode is "editor",
    handle page up given the current tab's node's source; exit.
  if the current tab's mode is "docster",
    handle page up given the current tab's node's document; exit.

to handle page up given a document:
  if the document is empty, exit.
  hide the cursor.
  scroll the document up one page.
  show the desktop with status.
  wait for 200 milliseconds.
  if the scrollbar's uppage is left-clicked, repeat.

to handle page up given a source:
  hide the cursor.
  handle page up given the source's text.
  show the desktop with status.
  wait for 200 milliseconds.
  if the scrollbar's uppage is left-clicked, repeat.

to handle page up given a text:
  if the text is nil, exit.
  put the text's vertical scroll flag in a flag called old flag.
  set the text's vertical scroll flag.
  scroll the text up one page.
  put the old flag in the text's vertical scroll flag.

to handle uptick:
  if the current tab is nil, exit.
  if the current tab's node is nil, exit.
  if the current tab's mode is "editor",
    handle uptick given the current tab's node's source; exit.
  if the current tab's mode is "docster",
    handle uptick given the current tab's node's document; exit.

to handle uptick given a document:
  hide the cursor.
  put the edge height into a difference's y.
  scroll the document given the difference.
  show the desktop with status.
  wait for 50 milliseconds.
  if the scrollbar's uptick is left-clicked, repeat.

to handle uptick given a source:
  if the source is nil, exit.
  hide the cursor.
  handle uptick given the source's text.
  show the desktop with status.
  wait for 50 milliseconds.
  if the scrollbar's uptick is left-clicked, repeat.

to handle uptick given a text:
  if the text is nil, exit.
  put the text's vertical scroll flag in a flag called old flag.
  set the text's vertical scroll flag.
  scroll the text up one line.
  put the old flag in the text's vertical scroll flag.

to horizontal scroll a source given a count:
  \debug the source's text's x.
  if the source is nil, exit.
  if the count is 0, exit.
  if the source's text is nil, exit.
  put the source's text's horizontal scroll flag in a flag called old flag.
  set the source's text's horizontal scroll flag.
  estimate character width given the source's text's font returning a ratio.
  put the count times the ratio's numerator divided by the ratio's denominator into some twips.
\  horizontal scroll the source's text given the count.
  put - the twips and 0 into a difference.
  move the source's text's origin given the difference. 
  \debug the source's text's x. 
  limit the origin of the source's text (scrolling).
  put the old flag in the source's text's horizontal scroll flag.

to initialize an arrow:
  append   0 and   0 to the arrow.
  append  30 and   0 to the arrow.
  append  90 and  30 to the arrow.
  append 165 and  30 to the arrow.
  append 225 and   0 to the arrow.
  append 255 and   0 to the arrow.
  append 135 and 195 to the arrow.
  append 120 and 195 to the arrow.
  append   0 and   0 to the arrow.

to initialize a scrollbar:
  create the scrollbar.
  put "handle uptick" in the scrollbar's uptick's handler.
  put the pale color in the scrollbar's uppage's color.
  put "handle page up" in the scrollbar's uppage's handler.
  put the pale color in the scrollbar's downpage's color.
  put "handle page down" in the scrollbar's downpage's handler.
  put "handle downtick" in the scrollbar's downtick's handler.
  resize the scrollbar.

to put a text's characters/box into a count:
  if the text is nil, put 0 into the count; exit.
  estimate character width given the text's font returning a ratio.
  put the text's box's width times the ratio's denominator divided by the ratio's numerator into the count.

to resize a scrollbar:
  put the screen's right minus 1/4 inch in the scrollbar's box's left.
  put the screen's right in the scrollbar's box's right.
  put the bar's bottom minus 1/4 inch in the scrollbar's box's top.
  put the switch's top plus 1/4 inch in the scrollbar's box's bottom.
  put the scrollbar's box's left in the scrollbar's uptick's left.
  put the scrollbar's box's left in the scrollbar's uppage's left.
  put the scrollbar's box's left in the scrollbar's cab's left.
  put the scrollbar's box's left in the scrollbar's downpage's left.
  put the scrollbar's box's left in the scrollbar's downtick's left.
  put the scrollbar's box's right in the scrollbar's uptick's right.
  put the scrollbar's box's right in the scrollbar's uppage's right.
  put the scrollbar's box's right in the scrollbar's cab's right.
  put the scrollbar's box's right in the scrollbar's downpage's right.
  put the scrollbar's box's right in the scrollbar's downtick's right.
  put the scrollbar's box's top in the scrollbar's uptick's top.
  put the scrollbar's uptick's top plus 1/4 inch
    in the scrollbar's uptick's bottom.
  put the scrollbar's uptick's bottom
    in the scrollbar's uppage's top.
  put the scrollbar's box's bottom
    in the scrollbar's downtick's bottom.
  put the scrollbar's downtick's bottom minus 1/4 inch
    in the scrollbar's downtick's top.
  put the scrollbar's downtick's top
    in the scrollbar's downpage's bottom.
  adjust the scrollbar.

to scroll a document given an event (scrollbar drag):
  if the document is nil, exit.
  if the event is nil, exit.
  put the event's spot in a spot called old spot.
  put the old spot's y in a number called old y.
  put 3 in a count called leeway count.
  convert the leeway count to a height called leeway height
    given the document (invert scrollbar drag).  
  put the scrollbar's downpage's height plus the old y
    plus the leeway height in a number called max y.
  put the old y in a number called previous y.
  loop.
    if a flag is set, show the desktop with status.
    put the mouse's spot's y in a number called current y.
    if the mouse's left button is up,
      exit.
    if the current y is greater than the max y,
      put the max y in the current y.
    put the current y minus the previous y in a height.
    if the height is 0, repeat.
    convert the height to a count given the document (scrollbar drag).
    if the count is 0, repeat.
    scroll the document down given the count.
    put the current y in the previous y.
    set the flag.
  repeat.

to scroll given an event (scrollbar drag):
  if the current tab is nil, exit.
  if the current tab's node is nil, exit.
  if the current tab's mode is "editor",
    scroll the current tab's node's source given the event (scrollbar drag); exit.
  if the current tab's mode is "docster",
    scroll the current tab's node's document given the event (scrollbar drag); exit.

to scroll a source given a count:
  if the count is 0, exit.
  if the source is nil, exit.
  if the source's text is nil, exit.
  put the source's text's vertical scroll flag in a flag called old flag.
  set the source's text's vertical scroll flag.
  scroll the source's text given the count.  
  put the old flag in the source's text's vertical scroll flag.

to scroll a source given an event (scrollbar drag):
  if the source is nil, exit.
  if the event is nil, exit.
  put the event's spot in a spot called old spot.
  put the old spot's y in a number called old y.
  put 3 in a count called leeway count.
  convert the leeway count to a height called leeway height
    given the source (invert scrollbar drag).  
  put the scrollbar's downpage's height plus the old y
    plus the leeway height in a number called max y.
  put the old y in a number called previous y.
  loop.
    if a flag is set, show the desktop with status.
    put the mouse's spot's y in a number called current y.
    if the mouse's left button is up,
      exit.
    if the current y is greater than the max y,
      put the max y in the current y.
    put the current y minus the previous y in a height.
    if the height is 0, repeat.
    convert the height to a count given the source (scrollbar drag).
    if the count is 0, repeat.
    scroll the source given the count.
    put the current y in the previous y.
    set the flag.
  repeat.

a scrollbar has
  a box,
  a command called uptick,
  a command called uppage,
  a command called cab,
  a command called downpage,
  a command called downtick.

the scrollbar is a scrollbar.

to stash horizontal scroll speed:
  if the stashed horizontal scroll speed is 0,
    put 3 in the stashed horizontal scroll speed.
  get the horizontal scroll speed returning a number (from windows).
  if the number is not 0,
    put the number in the stashed horizontal scroll speed.

to stash scroll speed:
  if the stashed scroll speed is 0,
    put 3 in the stashed scroll speed.
  get the scroll speed returning a number (from windows).
  if the number is not 0,
    put the number in the stashed scroll speed.

the stashed horizontal scroll speed is a number.

\ A stashed horizontal scroll speed of -1 = one screen at a time.

the stashed scroll speed is a number.

\ A stashed scroll speed of -1 = one screen at a time.

the unprocessed horizontal mouse roll is a number.
\ a WHEEL_DELTA of 120 = 15 degrees, so 2880 = one rotation.
\ a WHEEL_DELTA requests WheelScrollChars (horizontal scroll speed) of movement.

the unprocessed mouse roll is a number.
\ a WHEEL_DELTA of 120 = 15 degrees, so 2880 = one rotation.
\ a WHEEL_DELTA requests WheelScrollLines (scroll speed) of movement.
