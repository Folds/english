\ Copyright © 2014, 2017 by Jasper Paulsen.

This file lists issues that have been demonstrably fixed
(but not yet automatically regression-tested)
in the Plain English programming environment.
All of these fixes have been fully demonstrated.
The Plain English programming environment is called Cal.
Currently, the file has a .txt extension,
so that it will not be compiled into the executable.

The list of outstanding issues is in issues.txt.
Done issues.txt explains how the issues are rated.
                It has issues that are marked won't do,
                and fixes that have been demonstrated
                    and automatically regression-tested.

\ ======================================
   
The following requests have been completed.
The program's change log is implicit
in the source code repository's change log.
These items should occasionally be moved to fixed issues.txt.

\ ======================================

The following requests have been demonstrated, and have test plan(s),
but have not yet been tested.

260.  Fix editor so short texts don't pop up and down.
  Status:    Demonstrated.
  Audience:  Application users.
  Benefit:   Medium.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on June 4, 2017.
  Test plan:
    Create a dummy source.
    Create a dummy node containing the dummy source.
    Put the current node in a temp node.
    Put the dummy node in the current node.
    Confirm that the scrollbar is not needed.
    Confirm that the first row is at the top of the pad.
    Page down.
    Confirm that the first row is at the top of the pad.
    Page up.
    Confirm that the first row is at the top of the pad.
    Put the temp node back in the current node.
    Destroy the dummy source and dummy node.

146.  Fix crashing bug in writer's Font Name… menu item.
  The program crashes (Windows is OK)
  immediately upon trying to clicking the Font Name…
  menu item, when the current tab is in "writer" mode.
  The submenu of available fonts does not appear.
  The "editor" mode does not have this problem.
  Benefit.   Critical.
  Status.    Demonstrated fix.
  Audience.  Users of the writer.
  Implementation difficulty.  Medium.
  Demoing difficulty.  Easy.
  Testing difficulty.  Medium.
  Requested by Jasper Paulsen on March 8, 2017.
  Test plan:
    create a dummy document, with a dummy page.
    put the dummy document in a dummy node.
    put the current node in a temp node.
    put the current font in a temp font.
    set the current node to the dummy node.
    get a font.
    populate a font name menu.
    verify that the font name menu contains at least 4 font names.
    restore the current node from the temp node.
    restore the current font from the temp font.
    destroy the dummy page, dummy document, and dummy node.

147.  Fix crashing bug in writer's Font Height… menu item.
  The program crashes (Windows is OK)
  immediately upon trying to clicking the Font Height…
  menu item, when the current tab is in "writer" mode.
  The submenu of available font heights does not appear.
  The "editor" mode does not have this problem.
  Benefit.   Critical.
  Status.    Demonstrated fix.
  Audience.  Users of the writer.
  Implementation difficulty.  Medium.
  Demoing difficulty.  Easy.
  Testing difficulty.  Medium.
  Requested by Jasper Paulsen on March 8, 2017.
  Test plan:
    create a dummy document, with a dummy page.
    put the dummy document in a dummy node.
    put the current node in a temp node.
    put the current font in a temp font.
    set the current node to the dummy node.
    get a font.
    populate a font height menu.
    verify that the font height menu contains at least 7 options.
    restore the current node from the temp node.
    restore the current font from the temp font.
    destroy the dummy page, dummy document, and dummy node.

259.  Fix docster so short lists of edges don't pop up and down.
  Status:    Demonstrated.
  Audience:  Application users.
  Benefit:   Medium.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on June 4, 2017.
  Test plan:
    Create a dummy document.
    Create a few dummy pages in the dummy document.
    Create a dummy node containing the dummy document.
    Put the current node in a temp node.
    Put the dummy node in the current node.
    Confirm that the scrollbar is not needed.
    Confirm that the first row is at the top of the pad.
    Page down.
    Confirm that the first row is at the top of the pad.
    Page up.
    Confirm that the first row is at the top of the pad.
    Put the temp node back in the current node.
    Destroy the dummy pages, dummy document, and dummy node.

238.  Add scrollbar to the finder.
  Status:   Demonstrated.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2014.
  Test plan:
    Put the current node in a temp node.
    Create a folder.
    Add a few empty files to the folder.
    Switch the tab to the folder.
    Confirm that the scrollbar is not needed.
    Add a bunch more empty files to the folder.
    Refresh the folder.
    Confirm that the scrollbar is needed.
    Delete the empty files.
    Switch the tab back to the temp node.
    Delete the folder.

164.  In writer, make font name menu highlight match selected text.
  Status:   Demonstrated.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.
  Test plan:
    back up current font.
    back up manual font.
    put the current node in a temp node.
    set the current font.
    create a dummy node, with a dummy document,
      with a dummy page, with a text.
    set the font of the text to something else.
    put the dummy node in the current tab.
    verify that the current font name is the something else.
    set the current node to the temp node.
    set the manual font to the backup manual font.
    set the current font to the backup font.
    destroy the text, the dummy page, the dummy document,
      and the dummy node.
 
165.  In writer, make font height menu highlight match selected text.
  Status:   Demonstrated.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.
  Test plan:
    back up current font.
    back up manual font.
    put the current node in a temp node.
    set the current font.
    create a dummy node, with a dummy document,
      with a dummy page, with a text.
    set the font of the text to something else.
    put the dummy node in the current tab.
    verify that the current font height is the something else.
    set the current node to the temp node.
    set the manual font to the backup manual font.
    set the current font to the backup font.
    destroy the text, the dummy page, the dummy document,
      and the dummy node.

136:  Output test failure messages to StdErr when tests requested.
  Use the same infrastructure as the compile failure messages.
  Only do this when testing is requested on the command line.
  Benefit:  Medium.  This would make it easier to interpret
            build verification test results in a build pipeline.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on March 1, 2017.
  Test plan:
    Similar to 135, except create a deliberately failing test,
      and use /test instead of /test=verbose.

272.  Refactor scrolling code to reduce duplication
  Status:  Demonstrated.
  Audience:  Application users.
  Benefit:   Minor.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on June 6, 2017.

070.  Don't hide programs outside of the program's window.
  Currently, the program grabs a screenshot when it starts.
  The screenshot includes the full screen,
  not just the area the program is supposed to be in.
  This means that other programs are hidden
  whenever Cal is the active window.
  The benefit is important -- most Windows and Linux programmers
    alternate working in their IDEs and doing other things.
  The difficulty is hard -- it should not require much code,
    but it is not obvious which code needs to be fixed.
  The status is demonstrated.
  The audiences are Windows programmers and Linux programmers.
  Demoing would be easy.  Windows programmers and Linux programmers
     would demo it all the time, but some full-screen users would only demo it
     when Cal did not occupy the full screen
     (or when they use two side-by-side instances of Cal).
  Testing would be hard.  The test would need to check that
     the size metadata of the bitmap used by the main window
     was consistent with the intended size of the main window.
     This would use the bitmapinfoheader feature of the Win32 API.
  Requested by Jasper Paulsen on March 7, 2014.

\ ======================================
   
The following requests have been demonstrated,
but do not have test plans yet.

144.  Allow viewing result of running a program.
  Add a menu item to review the run's result.
  259 means the program is still active.
  If the recently run program has finished, show its return code.
  Benefit:  Minor.  Helps demonstrate command-line compiler return code.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Programmers.
  Requested by Jasper Paulsen on March 6, 2017.

242.  Gray out irrelevant menu items.
  If a menu item requires a particular kind of thing
  to be selected, but no such thing is selected,
  gray out the menu item.
  Status:    Demonstrated.
  Audience:  Users.
  Benefit:   Medium.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Medium.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on May 22, 2017.

067.  Add F3 as a shortcut for find next.
  Audience:  Windows programmers.
  Status:  Demonstrated.
  Benefit:  Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 9, 2014.

068. Add F5 as a shortcut for run (from the editor window).
  Audience:  Windows programmers.
  Status:  Demonstrated.
  Benefit:  Minor.
  Implementation difficulty:  Trivial.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 9, 2014.
  Benefit:  Very important

096.  Enable minimize on Windows kluges, but not on WINE kluges.
  Benefit:  Important.
  Audience:  Windows programmers.
  Status:  Partially demonstrated.
    (Demonstrated on WINE, but not on Windows.)
  Implementation difficulty:  Easy -- if and only if
    it is possible to distinguish Windows kluges from WINE kluges.
  Demoing difficulty:  Hard.
  Testing difficulty:  Profound.
  Requested by Jasper Paulsen on March 17, 2014.

089.  Allow the maximum number of displayed regression tests to depend
  only on the amount of room available for displaying them.
  Specifically, do not require the corresponding menu handler
  to be hardcoded in the menu handler switch.
  Audience: Programmers.
  Status:   Implemented.
  Benefit:  Minor.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Easy, after there are many tests that all pass.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 12, 2014.

090.  Allow user to copy a test result to the clipboard by clicking on it.
  Audience: Programmers.
  Status:   Demonstrated.
  Benefit:  Important.  This allows using the regression test feature
     to output text to the clipboard, which means run-time values can
     be copied into code sources for reading and munging by the user.
     In turn, this makes it much easier to fix many bugs.
  Implementation difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 12, 2014.

013.  Allow changing the main window size and location at run-time.
  Currently, the main window is fixed at the top-left corner of the screen.
  Currently, the main window's size is fixed.
  Currently, the program does not have mouse cursors available
  for changing widths, changing heights, nor dragging window corners.
  Status:  Demonstrated.
  Audience:  Windows programmers and Linux programmers.
  Benefit:  Important.  It will allow users to adjust the size of Cal
            depending on how important their distractions from Cal are.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Easy.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

239.  Add mouse scrolling to the finder.
  Status:   Demonstrated.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2014.

080.  Keep track of the user's most recent choice
  of any "Other font height" that is not one of the standard font heights.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Benefit:  Minor.
  Status: Demonstrated.
  Requested by Jasper Paulsen on March 12, 2014.

081.  If the user's most recent choice of non-standard
  "Other font height" is not otherwise listed in the font height submenu,
  include it.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Benefit:  Minor.
  Status: Demonstrated.
  Requested by Jasper Paulsen on March 12, 2014.

082.  If the current font height (in the editor or writer pad)
  is not otherwise listed in the font height submenu, include it.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Benefit:  Minor.
  Status: Demonstrated.
  Requested by Jasper Paulsen on March 12, 2014.

078.  Allow font names to be added dynamically to the menus.
  Specifically, do not require the corresponding menu handler
  to be hardcoded in the menu handler switch.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Benefit:  Minor.
  Status: Demonstrated.
  Requested by Jasper Paulsen on March 12, 2014.

073.  Keep track of the user's most recent choice
  of any "Other font name" that is not one of the standard fonts.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Benefit:  Minor.
  Status: Demonstrated.
  Requested by Jasper Paulsen on March 12, 2014.

074.  If the user's most recent choice of non-standard
  "Other font name" is not otherwise listed in the font name submenu,
  include it.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Trivial.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Benefit:  Minor.
  Status: Demonstrated.
  Requested by Jasper Paulsen on March 12, 2014.

291.  If the current tab is the editor, don't show items over 1 inch in the font height menu.
  The editor limits its font heights to 1 inch.
  Status:    Demonstrated.
  Audience:  Application users.
  Benefit:   Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on July 9, 2017.

011.  Allow the menus (and status bar) to fold to two rows.
  Currently, Cal's menus and status bar need about 1000 pixels of width
  at the top of the screen.  This forces Cal to be at least 1000 pixels wide.
  (The width is approximate, because Cal does not check whether Windows
   has more than 96 pixels per inch.)
  Audience:  Windows programmers and Linux programmers.
  Benefit:  Important.  Most users would need this feature
    to be able to put two instances of Cal side-by-side.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Hard (without the ability
    to adjust the main window's width at run time);
    Easy (if the user can adjust the main window's width at run time).
  Testing difficulty: Medium.
  Status:  Demonstrated.
  Requested by Jasper Paulsen on March 7, 2014.

019.  Allow the "Run" feature to launch the new instance of Cal
next to the first instance, instead of covering the first instance.
  Audience:  programmers.
  Benefit:  Probably important.  This would allow simultaneously
    using the draft program, and viewing the relevant source code.
  Status: Demonstrated.
  Requested by Jasper Paulsen on March 7, 2014.

269.  Allow user to save files that have not been modified.
  Status:  Demonstrated.
  Audience:  All users.
  Benefit:   Medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on June 4, 2017.

270.  Make explicit which routines only save unmodified files.
  Status:  Demonstrated.
  Audience:  Programmers.
  Benefit:   Medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Not applicable.
  Requested by Jasper Paulsen on June 4, 2017.

032.  Adjust the number of tabs, depending on the initial width of the main window.
  Status: Demonstrated.
  Audience:  Windows programmers and Linux programmers.
  Implementation Difficulty:  easy.
  Demoing difficulty:  easy.
  Testing difficulty:  medium.
  Benefit:  Minor.
  Requested by Jasper Paulsen on March 7, 2014.

038.  Add a vertical scroll bar.
  Currently, the user can move vertically in a document by panning
    (with the mouse), or by using the up and down arrow keys,
    or by using the page up and page down keys.
  None of these features indicate how much more document
    is above or below the currently shown region.
  None of these features allow the user to quickly
    go to a particular place in the document.
  Panning requires one click-and-drag of the viewable height,
    plus another drag of the viewable height,
    per page of text being panned.
  Audience -- Windows programmers.
     Windows users expect to be able to use the scroll bar to:
     quickly find a place in the document,
     quickly scroll through then entire document,
     fine-tune their location in the document.
  The benefit is important -- this feature will allow people to
     use large documents without needing Ctrl-F
     every time they want to find something.
  The status is a demonstrated.
  The implementation difficulty is hard.
     A scroll bar has many sub-features,
     all of which need to be implemented similarly to a standard.
     The relevant standard is Windows' implementation of vertical
     scroll bars.  Each individual sub-feature is easy.
  The testing difficulty is hard, for the same reasons
     as the implemenation difficulty.
     Each individual sub-feature has a medium testing difficulty.
  The demoing difficulty is medium.
     Each individual sub-feature can be demoed easily.
  This feature will be much easier to implement
     once name spaces are available.
  Requested by Jasper Paulsen on March 7, 2014.

102.  Add a command line option to choose a fixed-width font.
  If the system has "Courier New" available, use it.
  Benefit:  Very important -- many potential users did not even try
            the system, because the first font they saw was the
            old default font, and they did not see how to change the font.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Hard.
  Testing difficulty:  Medium.
  Status:  Demonstrated.
  Requested by Jasper Paulsen on April 11, 2014.

112.  Enable vertical mouse-wheel scrolling in editor panes.
  Make using the mouse-wheel similar to dragging the scrollbar cab.
  Status:  Demonstrated.
  Benefit: Important.  Most users of web browsers rely
           on mouse-wheel scrolling.
  Implementation difficulty:  Hard.
           Requires handling another Windows event. (#522.)
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on February 24, 2017

290.  Adjust the editor's text's box's height
  when shrinking from full-screen to half-screen.
  Prevent the editor's text from overlapping with the tabs.
  Status:    Demonstrated.
  Audience:  Application users.
  Benefit:   Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on July 7, 2017.

263.  Allow editor to export all test results as a text file.
  Save in the project folder as "test results.txt"
  if test all is called from the GUI.  Continue to only send
  to standard error if called from the command line.
  Status:    Demonstrated.
  Audience:  Programmers.
  Benefit:   Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on June 3, 2017.

276.  Save test results in executable's folder.
  Regardless of which file (if any) is open in the current tab.
  Status:    Demonstrated.
  Audience:  Programmers.
  Benefit:   Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on June 6, 2017.

155.  Add a /full command line option for full-screen mode.
  Status:   Demonstrated.
  Benefit.  Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by:  Jasper Paulsen on March 13, 2017.

151.  Change default height from 1/4 inch to 2/9 inch.
  If Osmosian is chosen, it will default to 1/4 inch high.
  Status:   Demonstrated.
  Benefit:  Important.  Would make menus, status, and tab strip
            easier to read.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by:  Jasper Paulsen on March 13, 2017.

104.  Include a shortcut with /left /tt command-line options.
  This shortcut would be designed for newbies.
  Audience:  Windows programmers.
  Status:    Demonstrated, by making these the default.
  Requested by Jasper Paulsen on April 11, 2014.

105.  Create a Linux shortcut with /left /tt command-line options.
  This shortcut would be designed for newbies running WINE.
  Audience:  Linux programmers.
  Status:    Made these the default.
  Requested by Jasper Paulsen on April 11, 2014.

138.  Add ability to copy compiler error messages to the clipboard.
  Similar to copying test results to the clipboard.
  Benefit:  Medium.
            Would make it easier to fix compiler errors.
            Would mitigate the problem of error messages
            that are too long to display when
            the desktop is only half the screen.
  Status:   Demonstrated.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Windows programmers.
  Requested by Jasper Paulsen on March 3, 2017.
  
197.  In finder, allow running a .exe file.
  Status:    Demonstrated.
  Audience:  Turtle programmers.
  Benefit:   Medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on March 13, 2017.

016.  Mark the tabs to indicate files with unsaved edits.
  For example, put a "*" before the name of each unsaved file.
  Or perhaps put the file designator's text in dark blue.
  (Chose a color 1/5 of the way from darkest blue toward black.)
  Audience:  programmers.
  Status:   Demonstrated.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

210.  In colors, add a "pen" alias for each color.
  Status:  Implemented.
  Audience:  Turtle programmers.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on March 13, 2017.
 
240.  Add CAL-4700 writer's trace polygon feature.
  In the writer, old down the alt key or control key,
  and click a bunch of points to make a polygon.
  Status:    Demonstrated.
  Audience:  Cartoonists.
  Benefit:   Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on March 13, 2017.

241.  Implement CAL-4700's border and fill feature.
  Put it in the writer's C->Color...->Fill Completely...
  and F->Fill Completely... menus.  Don't create a * menu.
  Status:    Demonstrated.
  Audience:  Cartoonists.
  Benefit:   Medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on March 13, 2017.

117.  Enable shift mouse-wheel scrolling horizontally in editor panes.
  Let the user press Shift while scrolling the vertical wheel,
  in order to scroll horizontally.  In this scenario,
  use the vertical settings to control the horizontal speed.
  Status:  Demonstrated.
  Benefit: Medium.  Tilting the mouse wheel is harder
           than rolling the wheel.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Macintosh programmers.
  Requested by Jasper Paulsen on February 28, 2017

110.  Prevent scrollbar's downtick from scrolling past last line.
  Neither CAL's down arrow, nor Notepad's downtick
  scrolls past the last line of the file.
  Status:  Demonstrated.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Windows programmers.
  Requested by Jasper Paulsen on February 28, 2017.

176.  Add a "Measure Code" menu item.
  Output a text file with the following columns:
  source   code lines  just comments   blank lines  code wraps  total lines
  with one line for each source file in the folder,
  and one line for the totals.
  Use tab-separated variable format.
  Save as <exe name>.tsv
  Status:  Demonstrated, via batch file.
  Audience:  Programmers
  Benefit:   Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 23, 2017.

153.  Center text vertically in tab strips.
  Status:   Already done in 3043.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by:  Jasper Paulsen on March 13, 2017.

154.  Center text vertically in menus and status.
  Status:   Already done in 3043.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by:  Jasper Paulsen on March 13, 2017.

152.  Only load/unload/preview the Osmosian font when needed.
  Status:   Demonstrated.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by:  Jasper Paulsen on March 13, 2017.

156.  Add a 1/9 inch yank setting when 2/9 inch high fonts are present.
  Status:   Demonstrated.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by:  Jasper Paulsen on March 13, 2017.

111.  Prevent mouse wheel from scrolling past last line.
  Neither CAL's scrollbar, nor Notepad's mouse wheel
  scrolls past the last line of the file.
  Status:   Demonstrated.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Windows programmers.
  Requested by Jasper Paulsen on February 28, 2017.

113.  Adjust mouse-wheel scrolling speed per System Parameters.
  Per Microsoft specs, the mouse-wheel scrolling speed
  should be adjustable using Windows' interface for changing
  System Parameters.
  Status:  Demonstrated.
  Benefit: Important.  Most users of web browsers rely
           on mouse-wheel scrolling.
  Implementation difficulty:  Hard.
           Requires handling another Windows event. ( #26.)
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on February 24, 2017

162.  In writer, make font name choice affect new texts.
  Status:   Demonstrated.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.

163.  In writer, make font height choice affect new texts.
  Status:   Demonstrated.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.

166.  In writer, open doc with font name based on contents of doc.
  Status:   Demonstrated.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.

167.  In writer, open doc with font height based on contents of doc.
  Status:   Demonstrated.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.

173.  Allow font name other to work in writer when nothing is selected.
  Status:    Demonstrated.
  Audience:  ordinary users.
  Benefit:   medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 21, 2017.

174.  Allow font height other to work in writer when nothing is selected.
  Status:    Demonstrated.
  Audience:  ordinary users.
  Benefit:   medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 21, 2017.

114.  Allow mouse-wheel scrolling at one screen per 15°.
  This is a Windows undocumented feature that can be set
  using Windows' interface for changing System Parameters.
  This feature sets the scroll speed to -1.
  Status:  Demonstrated.
  Benefit: Medium.  Most users of web browsers rely
           on mouse-wheel scrolling, but most do not
           set their mice this fast.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on February 27, 2017

115.  Enable horizontal mouse-wheel scrolling in editor panes.
  Let the user tilt the mouse-wheel to move an editor's text
  horizontally, in units of average characters instead of lines.
  Status:  Demonstrated.
  Benefit: Minor.  Tilting the mouse wheel is harder
           than rolling the wheel.
  Implementation difficulty:  Hard.
           Requires handling another Windows event. (#526)
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on February 28, 2017

098.  Add a "Diagnostics..." menu item for the regression tests.
  Status:   Demonstrated.  (But as the "Test" menu item.)
  Benefit:  Minor.  The paradigm is that all features should be
    available through the menu.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Hard -- need to add a feature to test
    whether a menu item exists.
  Requested by Gerry Rzeppa on March 18, 2014.

168.  Add scrollbar to writer's page menu.
  Status:   Demonstrated.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.

169.  Add mouse scrolling to writer's page menu.
  Status:   Demonstrated.
  Benefit:  Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 13, 2014.

116.  Enable fast horizontal mouse-wheel scrolling in editor panes.
  Let the user tilt the mouse-wheel to move an editor's text
  horizontally, in units of screen widths.
  Status:  Demonstrated.
  Benefit: Minor.  Tilting the mouse wheel is harder
           than rolling the wheel.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on February 28, 2017

109.  Do not show zero-height command boxes in the scrollbar.
  Often the scrollbar's uppage or downpage box has zero height.
  When this occurs, the zero-height box should not be drawn.
  Status:   Demonstrated.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Windows and Linux programmers.
  Requested by Jasper Paulsen on February 26, 2017.

202.  In editor, change sorting to accommodate multi-line routine headers.
  Status:    Demonstrated.
  Audience:  Programmers.
  Benefit:   Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Gerry Rzeppa on March 13, 2017.

227.  Move bottom row of text in tab slightly lower.
  Status:    Demonstrated.
  Audience:  Windows programmers.
  Benefit:   Medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2017.

226.  Increase tab height enough to allow a second line of text.
  Status:    Demonstrated.
  Audience:  Windows programmers.
  Benefit:   Medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2017.

228.  Add top row of text in tab.
  Status:    Demonstrated.
  Audience:  Windows programmers.
  Benefit:   Medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2017.

229.  Show node's parent's descriptor in tab's top row.
  Status:    Demonstrated.
  Audience:  Windows programmers.
  Benefit:   Medium.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.  Verify works with
                       both Arial and the custom font.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2017.

230.  Show trailing \ in node's parent's descriptor.
  Status:    Demonstrated.
  Audience:  Windows programmers.
  Benefit:   Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2017.

236.  Make tabs show folder on top row, file on bottom row.
  Status:    Demonstrated.
  Audience:  Users.
  Benefit:   Medium.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2017.

246.  In the writer, make keypad Ctrl-+ a shortcut for enlarge.
  Status:    Demonstrated.
  Audience:  Regular users.
  Benefit:   Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 30, 2017.

247.  In the writer, make keypad Ctrl-- a shortcut for reduce.
  Status:    Demonstrated.
  Audience:  Regular users.
  Benefit:   Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 30, 2017.

248.  In the writer, make keyboard Ctrl-+ a shortcut for enlarge.
  Note that + is usually Shift-=.
  Status:    Demonstrated.
  Audience:  Regular users.
  Benefit:   Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 30, 2017.

249.  In the writer, make keyboard Ctrl-- a shortcut for reduce.
  Status:    Demonstrated.
  Audience:  Regular users.
  Benefit:   Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 30, 2017.

234.  Subtly make tabs' top lines of text less noticeable.
  Status:    Demonstrated.
  Audience:  Windows programmers.
  Benefit:   minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on May 20, 2017.

273.  Adjust scrollbar cab height
      when viewing window has empty rows at bottom.
  Status:  Demonstrated.
  Audience:  Application users.
  Benefit:   Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on June 7, 2017.
