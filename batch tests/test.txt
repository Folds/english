@if not "%OS%"=="Windows_NT" goto DOSEXIT

@setlocal

@rem    Copyright 2017 by Jasper Paulsen.
@rem    This batch script contains snippets of code from
@rem    Tim Hill's book on Windows NT Shell Scripting,
@rem    which is copyright 1998 by New Riders Publishing.

@rem    This batch script assumes that it is in a folder
@rem    (such as ~\bvt\40xx command line) that contains:
@rem    A *.exe of the version of CAL being tested, named cal-40xx.exe
@rem    An inputs subfolder, which has various subfolders.
@rem    Each subfolder of inputs will be copied into in_progress.
@rem    An in_progress subfolder, which will be emptied at the beginning
@rem    of the script, and filled as the script progresses.
@rem    An expected subfolder, which contains a known good copy
@rem    of output similar to what in_progress should contain.

:SETUP
@rem === Set the title of the command shell window ===
@set TITLE_PREFIX="Testing CAL-40xx"
@title %TITLE_PREFIX:"=%

@rem === Sync input libraries ===
@title %TITLE_PREFIX:"=%:  syncing input libraries...
@robocopy /mir inputs\_master\desktop inputs\oxymoron\desktop > NUL
@robocopy /mir inputs\_master\documentation inputs\stuttered_paths\roman_numerals\documentation > NUL
@robocopy /mir inputs\_master\documentation inputs\cal-3040\documentation > NUL
@robocopy /mir inputs\_master\lexicon inputs\stuttered_paths\roman_numerals\lexicon > NUL
@robocopy /mir inputs\_master\lexicon inputs\cal-3040\lexicon > NUL
@robocopy /mir inputs\_master\noodle inputs\run_twice\noodle > NUL
@robocopy /mir inputs\_master\noodle inputs\stuttered_paths\roman_numerals\noodle > NUL
@robocopy /mir inputs\_master\noodle inputs\turtle_demo\noodle > NUL
@robocopy /mir inputs\_master\noodle inputs\oxymoron\noodle > NUL
@robocopy /mir inputs\_master\turtle inputs\turtle_demo\turtle > NUL

@rem === Delete in_progress' subfolders ===
@title %TITLE_PREFIX:"=%:  clearing in_progress...
@robocopy /mir inputs\_master\empty in_progress > NUL

:TEST__1
@(set STEP="TEST__1")&(call :RESET_SUBSTEP)
@set TRYING="compiling CAL-3040."
@rem    Verify that CAL-40xx can compile CAL-3040.
@rem    Verify that CAL-40xx's /list command line feature works. 
@rem    Verify that CAL-40xx returns 0 when successful.
@robocopy /mir inputs\cal-3040 in_progress\cal-3040 > robocopy.txt
@move robocopy.txt in_progress\cal-3040 > NUL
@title %TITLE_PREFIX:"=%:  %TRYING:"=%..
@cal-40xx.exe /folder="%CD%\in_progress\cal-3040" /files="the noodle" /list
@set temp=%errorlevel%
@title %TITLE_PREFIX:"=%
@if %temp% EQU 0 goto :%STEP:"=%%NEXT%
@goto :ABORT
:TEST__1__2
@call :BUMP_SUBSTEP
@set EXPECTED_FOLDER="%CD:"=%\expected\cal-3040"
@set PROGRESS_FOLDER="%CD:"=%\in_progress\cal-3040"
@call :MATCH_SUBPATHS %EXPECTED_FOLDER% %PROGRESS_FOLDER%
@set RET=%RET%
@if {%RET%}=={""} goto :%STEP:"=%%NEXT% 
@set DETAILS="Did not find %RET:"=%"
@goto :ABORT
:TEST__1__3
@call :BUMP_SUBSTEP
@set EXE_PATH="%PROGRESS_FOLDER:"=%\cal-3040.exe"
@call :GET_FILESIZE %EXE_PATH%
@set EXE_SIZE=%RET%
@set LST_PATH="%PROGRESS_FOLDER:"=%\cal-3040.lst"
@call :GET_FILESIZE %LST_PATH%
@set LST_SIZE=%RET%
@if LST_SIZE GTR EXE_SIZE goto :%STEP:"=%%NEXT%
@set DETAILS="Expected *.lst to be larger than *.exe.  In %PROGRESS_FOLDER%, cal-3040.lst was just %LST_SIZE% bytes.  cal-3040.exe was %EXE_SIZE% bytes."
@goto :ABORT
:TEST__1__4

:TEST__2
@(set STEP="TEST__2")&(call :RESET_SUBSTEP)
@set TRYING="compiling blank program."
@rem    Verify that CAL-40xx returns 1 when command-line compilation fails.
@rem    Verify it reports reason for command-line compilation failure on stdout.
@robocopy /mir inputs\no_run in_progress\no_run > robocopy.txt
@move robocopy.txt in_progress\no_run > NUL
@title %TITLE_PREFIX:"=%:  %TRYING:"=%..
@cal-40xx.exe /folder="%CD%\in_progress\no_run" /files=blank /list 1>in_progress\no_run\out.txt 2>in_progress\no_run\err.txt
@set temp=%errorlevel%
@title %TITLE_PREFIX:"=%
@if %temp% EQU 1 goto :%STEP:"=%%NEXT%
@set DETAILS="Expected return value of 1.  Got return value of %temp%."
@goto :ABORT
:TEST__2__2
@call :BUMP_SUBSTEP
@set EXPECTED_FOLDER="%CD:"=%\expected\no run"
@set PROGRESS_FOLDER="%CD:"=%\in_progress\no run"
@set RET=""
@call :MATCH_SUBPATHS %EXPECTED_FOLDER% %PROGRESS_FOLDER%
@set RET=%RET%
@if {%RET%}=={""} goto :%STEP:"=%%NEXT% 
@set DETAILS="Did not find %RET:"=%"
@goto :ABORT
:TEST__2__3

:TEST__3
@(set STEP="TEST__3")&(call :RESET_SUBSTEP)
@set TRYING="running with ""/test""."
@call :RESET_SUBSTEP
@rem    Verify that CAL-40xx's tests pass.
@rem    Verify that CAL-40xx can run tests from command line.
@rem    Verify that /test reports summary of passed tests on stdout.
@robocopy /mir inputs\terse_test in_progress\terse_test > robocopy.txt
@move robocopy.txt in_progress\terse_test > NUL
@title %TITLE_PREFIX:"=%:  %TRYING:"=%..
@cal-40xx.exe /test 1>in_progress\terse_test\out.txt 2>in_progress\terse_test\err.txt
@set temp=%errorlevel%
@title %TITLE_PREFIX:"=%
@if %temp% EQU 0 goto :%STEP:"=%%NEXT%
@set DETAILS="Expected return value of 0.  Got return value of %temp%."
@goto :ABORT
:TEST__3__2
@call :BUMP_SUBSTEP
@set EXPECTED_FOLDER="%CD:"=%\expected\terse_test"
@set PROGRESS_FOLDER="%CD:"=%\in_progress\terse_test"
@set RET=""
@call :MATCH_SUBPATHS %EXPECTED_FOLDER% %PROGRESS_FOLDER%
@set RET=%RET%
@if {%RET%}=={""} goto :%STEP:"=%%NEXT% 
@set DETAILS="Did not find %RET:"=%"
@goto :ABORT
:TEST__3__3
@call :BUMP_SUBSTEP
@call :COUNT_LINES "%PROGRESS_FOLDER:"=%\err.txt"
@set LINES=%RET%
@if {%LINES%}=={1} goto :%STEP:"=%%NEXT% 
@set DETAILS="Expected 1 line.  %PROGRESS_FOLDER:"=%\err.txt had %LINES% lines."
@goto :ABORT
:TEST__3__4
@call :BUMP_SUBSTEP
@rem Just set up data for a substep of a later test.
@call :GET_FIRST_LINE "%PROGRESS_FOLDER:"=%\err.txt"
@set TERSE_FIRST_LINE=%RET%
:TEST__3__5

:TEST__4
@(set STEP="TEST__4")&(call :RESET_SUBSTEP)
@set TRYING="running with ""/test=verbose""."
@rem    Verify that CAL-40xx's tests pass.
@rem    Verify that /test=verbose lists test results on stdout.
@robocopy /mir inputs\verbose_test in_progress\verbose_test > robocopy.txt
@move robocopy.txt in_progress\verbose_test > NUL
@title %TITLE_PREFIX:"=%:  %TRYING:"=%..
@cal-40xx.exe /test=verbose 1>in_progress\verbose_test\out.txt 2>in_progress\verbose_test\err.txt
@set temp=%errorlevel%
@title %TITLE_PREFIX:"=%
@if %temp% EQU 0 goto :%STEP:"=%%NEXT%
@set DETAILS="Expected return value of 0.  Got return value of %temp%."
@goto :ABORT
:TEST__4__2
@call :BUMP_SUBSTEP
@set EXPECTED_FOLDER="%CD:"=%\expected\verbose_test"
@set PROGRESS_FOLDER="%CD:"=%\in_progress\verbose_test"
@set RET=""
@call :MATCH_SUBPATHS %EXPECTED_FOLDER% %PROGRESS_FOLDER%
@set RET=%RET%
@if {%RET%}=={""} goto :%STEP:"=%%NEXT% 
@set DETAILS="Did not find %RET:"=%"
@goto :ABORT
:TEST__4__3
@call :BUMP_SUBSTEP
@call :GET_FIRST_LINE "%PROGRESS_FOLDER:"=%\err.txt"
@set FIRST_LINE=%RET%
@call :GET_FIRST_TOKEN "%FIRST_LINE:"=%"
@set FIRST_TOKEN=%RET%
@set /a EXPECTED_LINES=%FIRST_TOKEN%+1
@call :COUNT_LINES "%PROGRESS_FOLDER:"=%\err.txt"
@set LINES=%RET%
@if {%LINES%}=={%EXPECTED_LINES%} goto :%STEP:"=%%NEXT% 
@set DETAILS="Expected %EXPECTED_LINES% lines.  %PROGRESS_FOLDER:"=%\err.txt had %LINES% lines."
@goto :ABORT
:TEST__4__4
@call :BUMP_SUBSTEP
@if {"%FIRST_LINE:"=%"}=={"%TERSE_FIRST_LINE:"=%"} goto :%STEP:"=%%NEXT%
@set DETAILS="Expected first lines of terse and verbose test results to match.  Terse was '%TERSE_FIRST_LINE%'; verbose was '%FIRST_LINE%'."
@goto :ABORT
:TEST__4__5


:TEST__5
@(set STEP="TEST__5")&(call :RESET_SUBSTEP)
@set TRYING="compile program using stuttered paths."
@rem    Verify that CAL-40xx can use a /folder path containing
@rem    "\..\" and "\.\", if the folder exists.
@rem    Verify that CAL-40xx can use a /file path containing
@rem    "\..\" and "\.\", if the file exists.
@rem    Verify that CAL-40xx can compile the corresponding code.
@rem    Verify that CAL can compile a two-level project,
@rem    including the noodle subfolder,
@rem    but excluding the lexicon and the "reamish" instructions.
@robocopy /mir inputs\stuttered_paths in_progress\stuttered_paths > robocopy.txt
@move robocopy.txt in_progress\stuttered_paths > NUL
@title %TITLE_PREFIX:"=%:  %TRYING:"=%..
@cal-40xx.exe /folder="%CD%\in_progress\stuttered_paths\.\stutter_folder\..\roman_numerals\." /files="stutter_toward_file\..\has_file\.\roman";; /list 1>in_progress\stuttered_paths\out.txt 2>in_progress\stuttered_paths\err.txt
@set temp=%errorlevel%
@title %TITLE_PREFIX:"=%
@if %temp% EQU 0 goto :%STEP:"=%%NEXT%
@goto :ABORT
:TEST__5__2
@call :BUMP_SUBSTEP
@set EXPECTED_FOLDER="%CD:"=%\expected\stuttered_paths"
@set PROGRESS_FOLDER="%CD:"=%\in_progress\stuttered_paths"
@call :MATCH_SUBPATHS %EXPECTED_FOLDER% %PROGRESS_FOLDER%
@set RET=%RET%
@if {%RET%}=={""} goto :%STEP:"=%%NEXT% 
@set DETAILS="Did not find %RET:"=%"
echo betty
@goto :ABORT
:TEST__5__3
@call :BUMP_SUBSTEP
@set EXE_PATH="%PROGRESS_FOLDER:"=%\roman_numerals\roman_numerals.exe"
@call :GET_FILESIZE %EXE_PATH%
@set EXE_SIZE=%RET%
@set LST_PATH="%PROGRESS_FOLDER:"=%\roman_numerals\roman_numerals.lst"
@call :GET_FILESIZE %LST_PATH%
@set LST_SIZE=%RET%
@if LST_SIZE GTR EXE_SIZE goto :%STEP:"=%%NEXT%
@set DETAILS="Expected *.lst to be larger than *.exe.  In '%PROGRESS_FOLDER:"=%\roman_numerals', roman_numerals.lst was just %LST_SIZE% bytes.  roman_numerals.exe was %EXE_SIZE% bytes."
echo celia
@goto :ABORT
:TEST__5__4

:TEST__6
@(set STEP="TEST__6")&(call :RESET_SUBSTEP)
@set TRYING="cannot compile duplicate run routine."
@rem    Verify that CAL-40xx's compiler can put an error
@rem    message on stdout, using gcc's format.
@robocopy /mir inputs\run_twice in_progress\run_twice > robocopy.txt
@move robocopy.txt in_progress\run_twice > NUL
@title %TITLE_PREFIX:"=%:  %TRYING:"=%..
@cal-40xx.exe /folder="%CD%\in_progress\run_twice\" /files="run run" /list 1>in_progress\run_twice\out.txt 2>in_progress\run_twice\err.txt
@set temp=%errorlevel%
@title %TITLE_PREFIX:"=%
@if %temp% EQU 1 goto :%STEP:"=%%NEXT%
@set DETAILS="Expected return value of 1.  Got return value of %temp%."
@goto :ABORT
:TEST__6__2
@call :BUMP_SUBSTEP
@set EXPECTED_FOLDER="%CD:"=%\expected\run_twice"
@set PROGRESS_FOLDER="%CD:"=%\in_progress\run_twice"
@set RET=""
@call :MATCH_SUBPATHS %EXPECTED_FOLDER% %PROGRESS_FOLDER%
@set RET=%RET%
@if {%RET%}=={""} goto :%STEP:"=%%NEXT% 
@set DETAILS="Did not find %RET:"=%"
@goto :ABORT
:TEST__6__3
@call :BUMP_SUBSTEP
@fc "%EXPECTED_FOLDER:"=%\err.txt" "%PROGRESS_FOLDER:"=%\err.txt" 1>NUL 2>NUL
@set temp=%errorlevel%
@if %temp% EQU 0 goto :%STEP:"=%%NEXT%
@set DETAILS="err.txt files did not match in %EXPECTED_FOLDER% and %PROGRESS_FOLDER%"
@if %temp% EQU 1 goto :ABORT
@set DETAILS="missing err.txt file in %EXPECTED_FOLDER% and/or %PROGRESS_FOLDER%"
@goto :ABORT
:TEST__6__4

:TEST__7
@(set STEP="TEST__7")&(call :RESET_SUBSTEP)
@set TRYING="compile turtle demo."
@rem    Verify that CAL-40xx's compiler can compile multi-line
@rem    routine headers that include alternates.
@rem    Verify that CAL-40xx's compiler can compile similes,
@rem    new propositions, at/on synonyms, and backward synonyms.
@robocopy /mir inputs\turtle_demo in_progress\turtle_demo > robocopy.txt
@move robocopy.txt in_progress\turtle_demo > NUL
@title %TITLE_PREFIX:"=%:  %TRYING:"=%..
@cal-40xx.exe /folder="%CD%\in_progress\turtle_demo\" /files="demo" /list 1>in_progress\turtle_demo\out.txt 2>in_progress\turtle_demo\err.txt
@set temp=%errorlevel%
@title %TITLE_PREFIX:"=%
@if %temp% EQU 0 goto :%STEP:"=%%NEXT%
@goto :ABORT
:TEST__7__2
@call :BUMP_SUBSTEP
@set EXPECTED_FOLDER="%CD:"=%\expected\turtle_demo"
@set PROGRESS_FOLDER="%CD:"=%\in_progress\turtle_demo"
@call :MATCH_SUBPATHS %EXPECTED_FOLDER% %PROGRESS_FOLDER%
@set RET=%RET%
@if {%RET%}=={""} goto :%STEP:"=%%NEXT% 
@set DETAILS="Did not find %RET:"=%"
@goto :ABORT
:TEST__7__3
@call :BUMP_SUBSTEP
@set EXE_PATH="%PROGRESS_FOLDER:"=%\turtle_demo.exe"
@call :GET_FILESIZE %EXE_PATH%
@set EXE_SIZE=%RET%
@set LST_PATH="%PROGRESS_FOLDER:"=%\turtle_demo.lst"
@call :GET_FILESIZE %LST_PATH%
@set LST_SIZE=%RET%
@if LST_SIZE GTR EXE_SIZE goto :%STEP:"=%%NEXT%
@set DETAILS="Expected *.lst to be larger than *.exe.  In %PROGRESS_FOLDER%, turtle_demo.lst was just %LST_SIZE% bytes.  turtle_demo.exe was %EXE_SIZE% bytes."
@goto :ABORT
:TEST__7__4

:TEST__8
@(set STEP="TEST__8")&(call :RESET_SUBSTEP)
@set TRYING="compile and run oxymoron with ""/test""."
@rem    Demonstrate using batch script to simulate a pre-processor,
@rem    by compiling the "bonus" source code file
@rem    instead of the "no bonus" source code file.
@rem    Verify that /test lists test failures on stderr.
@robocopy /mir inputs\oxymoron in_progress\oxymoron > robocopy.txt
@move robocopy.txt in_progress\oxymoron > NUL
@move "in_progress\oxymoron\noodle\no bonus" "in_progress\oxymoron\noodle\no bonus.txt" > NUL
@title %TITLE_PREFIX:"=%:  %TRYING:"=%..
@cal-40xx.exe /folder="%CD%\in_progress\oxymoron" /files="bonus";; /compile 1>in_progress\oxymoron\out.txt 2>in_progress\oxymoron\err.txt
@set temp=%errorlevel%
@title %TITLE_PREFIX:"=%
@if %temp% EQU 0 goto :%STEP:"=%%NEXT%
@goto :ABORT
:TEST__8__2
@call :BUMP_SUBSTEP
@in_progress\oxymoron\oxymoron.exe /test 1>in_progress\oxymoron\out.txt 2>in_progress\oxymoron\err.txt
@set temp=%errorlevel%
@title %TITLE_PREFIX:"=%
@if %temp% GTR 0 goto :%STEP:"=%%NEXT%
@set DETAILS="Expected positive return value.  Got return value of %temp%."
@goto :ABORT
:TEST__8__3
@call :BUMP_SUBSTEP
@set EXPECTED_FOLDER="%CD:"=%\expected\oxymoron"
@set PROGRESS_FOLDER="%CD:"=%\in_progress\oxymoron"
@set RET=""
@call :MATCH_SUBPATHS %EXPECTED_FOLDER% %PROGRESS_FOLDER%
@set RET=%RET%
@if {%RET%}=={""} goto :%STEP:"=%%NEXT% 
@set DETAILS="Did not find %RET:"=%"
@goto :ABORT
:TEST__8__4
@call :BUMP_SUBSTEP
@call :GET_FIRST_LINE "%PROGRESS_FOLDER:"=%\err.txt"
@set FIRST_LINE=%RET%
@call :GET_FIRST_TOKEN "%FIRST_LINE:"=%"
@set FIRST_TOKEN=%RET%
@set /a EXPECTED_LINES=%FIRST_TOKEN%+1
@call :COUNT_LINES "%PROGRESS_FOLDER:"=%\err.txt"
@set LINES=%RET%
@if {%LINES%}=={%EXPECTED_LINES%} goto :%STEP:"=%%NEXT% 
@set DETAILS="Expected %EXPECTED_LINES% lines.  %PROGRESS_FOLDER:"=%\err.txt had %LINES% lines."
@goto :ABORT
:TEST__8__5
@call :BUMP_SUBSTEP
@if %LINES% GTR 1 goto :%STEP:"=%%NEXT%
@set DETAILS="Expected more than 1 line.  %PROGRESS_FOLDER:"=%\err.txt had %LINES% lines."
@goto :ABORT
:TEST__8__6


:SUCCESS
@title CAL-40xx tests passed.
@goto :DONE

:ABORT
@echo %STEP:"=% failed.  Tried %TRYING:"=%  %DETAILS:"=%
@title CAL-40xx %STEP:"=% failed.

:DONE
@endlocal & set RET=%RET%
@goto :EOF

@rem === Helper routines that don't use setlocal ===

:RESET_SUBSTEP
@set SUBSTEP=___
@call :BUMP_SUBSTEP
@goto :EOF

:BUMP_SUBSTEP
@for /f "tokens=* delims=_" %%A in ("%SUBSTEP%") do @set SUBSTEP=%%A
@if "%SUBSTEP%"=="" set SUBSTEP=0
@set /a SUBSTEP=%SUBSTEP%+1
@set /a NEXT=%SUBSTEP%+1
@set SUBSTEP=___%SUBSTEP%
@set SUBSTEP=%SUBSTEP:~-3%
@set NEXT=___%NEXT%
@set NEXT=%NEXT:~-3%
@goto :EOF

@rem === Helper routines that use setlocal ===

@rem Gets file size (in bytes) of first argument.
:GET_FILESIZE
@setlocal
@set RET=%~z1
@endlocal & set RET=%RET%
@goto :EOF

@rem Count lines in a file
:COUNT_LINES
@setlocal
@for /f %%I in ('find /v /c "" ^< %1') do @set RET=%%I
@endlocal & set RET=%RET%
@goto :EOF

@rem Get first line of a file
:GET_FIRST_LINE
@setlocal
@set /p RET=< %1
@endlocal & set RET=%RET%
@goto :EOF

@rem Get first token of a string.  Ignores leading whitespace.
:GET_FIRST_TOKEN
@setlocal
@for /f "tokens=1" %%I in (%1) do @set RET=%%I
@endlocal & set RET=%RET%
@goto :EOF

@rem === Check that matching files and folders exist ===

@rem If a file in %EXPECTED_FOLDER%'s tree
@rem is not found in %PROGRESS_FOLDER%'s tree
@rem returns the path to the non-existent file
@rem in %PROGRESS_FOLDER%'s tree.
:MATCH_SUBPATHS
@setlocal
@set EXPECTED_FOLDER=%1
@set PROGRESS_FOLDER=%2
@call :RECURSIVE_MATCH %EXPECTED_FOLDER% %PROGRESS_FOLDER%
@set RET=%RET%
@if not {%RET%}=={""} echo %RET%
@endlocal & set RET=%RET%
@goto :EOF

@rem If a file in %EXPECTED_FOLDER%'s tree
@rem is not found in %PROGRESS_FOLDER%'s tree
@rem returns the path to the non-existent file
@rem in %PROGRESS_FOLDER%'s tree.
:RECURSIVE_MATCH
@setlocal
@setlocal EnableDelayedExpansion
@set EXPECTED_FOLDER=%1
@set PROGRESS_FOLDER=%2
@call :MATCH_FILES %EXPECTED_FOLDER% %PROGRESS_FOLDER%
@set RET=%RET%
@if not {%RET%}=={""} @(goto :RECURSIVE_MATCH_FAILED)
@for /d %%I in ("%EXPECTED_FOLDER:"=%\*") do @(
  @call :MATCH_FOLDER %EXPECTED_FOLDER% %PROGRESS_FOLDER% "%%I"
  @set RET=!RET!
  @if not {!RET!}=={""} @(goto :RECURSIVE_MATCH_FAILED)
)
@endlocal EnableDelayedExpansion & endlocal & set RET=%RET%
@goto :EOF
:RECURSIVE_MATCH_FAILED
@endlocal EnableDelayedExpansion & endlocal & set RET=%RET%
@goto :EOF

@rem If a file in %EXPECTED_FOLDER% is not found in %PROGRESS_FOLDER%,
@rem returns the path to the non-existent file in %PROGRESS_FOLDER%.
:MATCH_FILES
@setlocal
@setlocal EnableDelayedExpansion
@set EXPECTED_FOLDER=%1
@set PROGRESS_FOLDER=%2
@for %%I in ("%EXPECTED_FOLDER:"=%\*") do @(
  @call :MATCH_FILE %EXPECTED_FOLDER% %PROGRESS_FOLDER% "%%I"
  @set RET=!RET!
  @if not {!RET!}=={""} @(goto :PARENT_FAILED)
)
@endlocal EnableDelayedExpansion & endlocal & set RET=%RET%
@goto :EOF
:PARENT_FAILED
@endlocal EnableDelayedExpansion & endlocal & set RET=%RET%
@goto :EOF

:MATCH_FILE
@setlocal
@set EXPECTED_FOLDER=%1
@set PROGRESS_FOLDER=%2
@set ITEM=%3
@call :STRIP_PREFIX %EXPECTED_FOLDER% %ITEM%
@set TAIL=%RET%
@set RET=""
@if not exist "%PROGRESS_FOLDER:"=%%TAIL:"=%" (
  @set RET="%PROGRESS_FOLDER:"=%%TAIL:"=%"
)
@endlocal & set RET=%RET%
@goto :EOF

:MATCH_FOLDER
@setlocal
@set EXPECTED_FOLDER=%1
@set PROGRESS_FOLDER=%2
@set ITEM=%3
@call :STRIP_PREFIX %EXPECTED_FOLDER% %ITEM%
@set TAIL=%RET%
@set RET=""
@if not exist "%PROGRESS_FOLDER:"=%%TAIL:"=%" goto :MATCH_FOLDER_FAIL
@call :RECURSIVE_MATCH "%EXPECTED_FOLDER:"=%%TAIL:"=%" "%PROGRESS_FOLDER:"=%%TAIL:"=%"
@endlocal & set RET=%RET%
@goto :EOF
:MATCH_FOLDER_FAIL
@set RET="%PROGRESS_FOLDER:"=%%TAIL:"=%"
@endlocal & set RET=%RET%
@goto :EOF

:STRIP_PREFIX
@setlocal
@setlocal EnableDelayedExpansion
@set PREFIX=%1
@set ARG=%2
@set "RET=!ARG:%PREFIX:"=%=!"
@endlocal EnableDelayedExpansion & endlocal & set RET=%RET%
@goto :EOF

@rem === This section needs to be at the end ===

:DOSEXIT
echo This script requires Windows NT (or a version of Windows based on NT, such as Windows 2000, 2003, XP, Vista, 7, 8, or 10).
